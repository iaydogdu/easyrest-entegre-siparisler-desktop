import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { NgSelectModule } from '@ng-select/ng-select';
import { Router } from '@angular/router';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { AuthService } from '../../services/auth.service';
import { EntegreSiparisService, Order } from '../../services/entegre-siparis.service';
import { NotificationService } from '../../services/notification.service';
import { Subscription, interval } from 'rxjs';

@Component({
  selector: 'app-orders',
  standalone: true,
  imports: [CommonModule, FormsModule, TranslateModule, NgSelectModule],
  templateUrl: './orders.component.html',
  styleUrls: ['./orders.component.css']
})
export class OrdersComponent implements OnInit, OnDestroy {
  // Component Properties
  orders: Order[] = [];
        <div class="header-container">
          <!-- Logo ve Ba≈ülƒ±k -->
          <div class="brand-section">
            <div class="brand-logo">
              <div class="logo-circle">
                <span class="material-icons">restaurant_menu</span>
              </div>
            </div>
            <div class="brand-text">
              <h1 class="brand-title">EasyRest</h1>
              <p class="brand-subtitle">Entegre Sipari≈üler</p>
            </div>
          </div>

          <!-- √úst Kontroller -->
          <div class="top-controls">
            <!-- Maƒüaza Se√ßici -->
            <div class="store-selector">
              <div class="custom-select" (click)="toggleStoreDropdown()">
                <div class="select-content">
                  <span class="material-icons store-icon">store</span>
                  <div class="selected-store">
                    <div class="store-name">{{getSelectedStoreName()}}</div>
                    <div class="store-status">{{stores.length}} maƒüaza</div>
                  </div>
                  <span class="material-icons dropdown-arrow">{{showStoreDropdown ? 'expand_less' : 'expand_more'}}</span>
                </div>
              </div>
              
              <!-- Dropdown -->
              <div class="store-dropdown" [class.show]="showStoreDropdown">
                <div class="dropdown-search">
                  <span class="material-icons">search</span>
                  <input 
                    type="text" 
                    placeholder="Maƒüaza ara..." 
                    [(ngModel)]="storeSearchTerm"
                    class="search-input">
                </div>
                <div class="store-list">
                  <div 
                    *ngFor="let store of getFilteredStores()" 
                    class="store-item"
                    [class.selected]="store._id === selectedStore"
                    (click)="selectStore(store)">
                    <div class="store-info">
                      <div class="store-title">{{store.magazaAdi}}</div>
                      <div class="store-code">{{store.verilenmagazakodu || 'Kod: ' + store._id.substring(0,8)}}</div>
                    </div>
                    <span *ngIf="store._id === selectedStore" class="material-icons check-icon">check_circle</span>
                  </div>
                </div>
              </div>
            </div>

            <!-- Saƒü Kontroller -->
            <div class="right-controls">
              <!-- Ses Kontrol√º -->
              <div class="compact-control" (click)="toggleSound()" [class.active]="isSoundEnabled">
                <div class="compact-icon">
                  <span class="material-icons">{{isSoundEnabled ? 'volume_up' : 'volume_off'}}</span>
                </div>
                <div class="compact-text">
                  <div class="compact-title">Ses</div>
                  <div class="compact-status">{{isSoundEnabled ? 'A√ßƒ±k' : 'Kapalƒ±'}}</div>
                </div>
              </div>

              <!-- Otomatik Onay -->
              <div class="compact-control" (click)="toggleAutoApprove()" [class.active]="isAutoApproveEnabled">
                <div class="compact-icon">
                  <span class="material-icons">{{isAutoApproveEnabled ? 'auto_awesome' : 'auto_awesome_off'}}</span>
                </div>
                <div class="compact-text">
                  <div class="compact-title">Oto Onay</div>
                  <div class="compact-status">{{isAutoApproveEnabled ? 'A√ßƒ±k' : 'Kapalƒ±'}}</div>
                </div>
              </div>

              <!-- Yenile -->
              <div class="compact-control refresh-control" (click)="refreshOrders()" [class.loading]="loading || isRefreshing">
                <div class="compact-icon">
                  <span class="material-icons" [class.animate-spin]="loading || isRefreshing">refresh</span>
                </div>
                <div class="compact-text">
                  <div class="compact-title">Yenile</div>
                  <div class="compact-status">{{loading || isRefreshing ? 'Y√ºkleniyor' : 'Hazƒ±r'}}</div>
                </div>
              </div>

              <!-- Kullanƒ±cƒ± ve √áƒ±kƒ±≈ü -->
              <div class="user-section">
                <div class="user-info">
                  <div class="user-name">{{getKullaniciAdi()}}</div>
                  <div class="user-role">{{getSelectedStoreName()}}</div>
                </div>
                <div class="user-avatar">
                  <span class="material-icons">account_circle</span>
                </div>
                <button class="logout-btn" (click)="logout()">
                  <span class="material-icons">logout</span>
                  <span class="logout-text">√áƒ±kƒ±≈ü</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </header>

      <!-- Status Bar -->
      <div *ngIf="!loading && selectedStore" class="status-bar">
        <div class="status-content">
          <span class="total-count">Toplam: {{summary.total}}</span>
          
          <!-- Platform Filtreleri -->
          <div class="platform-filters">
            <div class="filter-chips">
              <div 
                class="filter-chip"
                [class.active]="currentFilter === 'ALL'"
                (click)="filteredOrder('ALL')">
                <div class="chip-icon">
                  <span class="material-icons">apps</span>
                </div>
                <div class="chip-text">
                  <span class="chip-label">T√ºm√º</span>
                  <span class="chip-count">{{summary.total}}</span>
                </div>
              </div>
              
              <div 
                class="filter-chip yemeksepeti-chip"
                [class.active]="currentFilter === 'YEMEKSEPETI'"
                (click)="filteredOrder('YEMEKSEPETI')">
                <div class="chip-icon">
                  <span class="platform-emoji">üçΩÔ∏è</span>
                </div>
                <div class="chip-text">
                  <span class="chip-label">YemekSepeti</span>
                  <span class="chip-count">{{summary.byType.yemeksepeti}}</span>
                </div>
              </div>
              
              <div 
                class="filter-chip trendyol-chip"
                [class.active]="currentFilter === 'TRENDYOL'"
                (click)="filteredOrder('TRENDYOL')">
                <div class="chip-icon">
                  <span class="platform-emoji">üõí</span>
                </div>
                <div class="chip-text">
                  <span class="chip-label">Trendyol</span>
                  <span class="chip-count">{{summary.byType.trendyol}}</span>
                </div>
              </div>
              
              <div 
                class="filter-chip migros-chip"
                [class.active]="currentFilter === 'MIGROS'"
                (click)="filteredOrder('MIGROS')">
                <div class="chip-icon">
                  <span class="platform-emoji">üõçÔ∏è</span>
                </div>
                <div class="chip-text">
                  <span class="chip-label">Migros</span>
                  <span class="chip-count">{{summary.byType.migros}}</span>
                </div>
              </div>
              
              <div 
                class="filter-chip getir-chip"
                [class.active]="currentFilter === 'GETIR'"
                (click)="filteredOrder('GETIR')">
                <div class="chip-icon">
                  <span class="platform-emoji">üü£</span>
                </div>
                <div class="chip-text">
                  <span class="chip-label">Getir</span>
                  <span class="chip-count">{{summary.byType.getir}}</span>
                </div>
              </div>
            </div>
          </div>
          
          <div class="sync-status">
            <div *ngIf="isRefreshing" class="sync-indicator"></div>
            <span class="sync-text">{{isRefreshing ? 'G√ºncelleniyor...' : 'Canlƒ±'}}</span>
            
            <!-- Background Sync Status -->
            <div class="background-sync-status">
              <div class="sync-item" title="Trendyol Sync (11 saniye)">
                <span class="sync-platform">T</span>
                <div class="sync-dot" [class.active]="getSyncStatus().trendyol.isRunning"></div>
              </div>
              <div class="sync-item" title="Trendyol Refund (1 saat)">
                <span class="sync-platform">TR</span>
                <div class="sync-dot" [class.active]="getSyncStatus().trendyolRefund.isRunning"></div>
              </div>
              <div class="sync-item" title="YemekSepeti Refund (3 saat)">
                <span class="sync-platform">YR</span>
                <div class="sync-dot" [class.active]="getSyncStatus().yemeksepetiRefund.isRunning"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <div class="main-content">
        <!-- Loading -->
        <div *ngIf="loading" class="loading-container">
          <div class="spinner"></div>
          <p class="loading-text">Sipari≈üler y√ºkleniyor...</p>
        </div>
        
        <!-- No Orders -->
        <div *ngIf="!loading && orders.length === 0" class="no-orders">
          <div class="no-orders-icon">üìã</div>
          <h3 class="no-orders-title">Hen√ºz sipari≈ü yok</h3>
          <p class="no-orders-text">Se√ßili maƒüaza i√ßin hen√ºz sipari≈ü bulunmuyor.</p>
          <div class="connection-status">
            Baƒülantƒ± durumu: <span class="status-active">‚úì Aktif</span>
          </div>
        </div>
        
        <!-- Orders Grid -->
        <div *ngIf="!loading && filteredOrders.length > 0" class="orders-grid">
          <div *ngFor="let order of filteredOrders; trackBy: trackByOrderId" 
               (click)="openOrderDetails(order)"
               class="order-card"
               [class.new-order]="isNewOrder(order)">
            
            <!-- Order Header -->
            <div class="order-header">
              <div class="order-info">
                <div class="order-id-section">
                  <span class="order-id">#{{getOrderId(order)}}</span>
                  <span *ngIf="isNewOrder(order)" class="new-badge">YENƒ∞</span>
                </div>
                <div class="platform-info">
                  <img [src]="getSourceLogo(order.type)" [alt]="order.type" class="platform-logo">
                  <span class="order-platform">{{getSourceText(order.type)}}</span>
                </div>
              </div>
              <div class="order-amount">{{formatPrice(getOrderAmount(order))}} ‚Ç∫</div>
            </div>

            <!-- Status -->
            <div class="order-status">
              <span class="status-badge {{getStatusClass(order.status)}}">
                {{getStatusText(order.status)}}
              </span>
              <span class="order-type">{{getOrderType(order)}}</span>
            </div>

            <!-- Customer Info -->
            <div class="customer-info">
              <div class="customer-name">üë§ {{getCustomerName(order)}}</div>
              <div class="customer-phone">üìû {{getCustomerPhone(order)}}</div>
            </div>

            <!-- Products Preview -->
            <div class="products-preview">
              <div *ngFor="let product of getProducts(order).slice(0, 2)" class="product-item">
                {{getProductQuantity(product)}}x {{getProductName(product)}}
              </div>
              <div *ngIf="getProducts(order).length > 2" class="more-products">
                +{{getProducts(order).length - 2}} √ºr√ºn daha
              </div>
            </div>

            <!-- Actions -->
            <div class="order-actions">
              <button 
                *ngIf="canApproveOrder(order)"
                (click)="manualApproveOrder(order); $event.stopPropagation()"
                class="touch-action-btn approve-btn">
                <span class="material-icons">check_circle</span>
                <span>Onayla</span>
              </button>
              
              <button 
                (click)="printToThermalPrinter(order); $event.stopPropagation()"
                class="touch-action-btn print-btn">
                <span class="material-icons">print</span>
                <span>Yazdƒ±r</span>
              </button>
              
              <button 
                (click)="copyOrderJson(order); $event.stopPropagation()"
                class="touch-action-btn json-btn">
                <span class="material-icons">content_copy</span>
                <span>JSON</span>
              </button>
            </div>

            <!-- Order Time -->
            <div class="order-time">{{formatDate(order.createdAt)}}</div>
          </div>
        </div>
      </div>

      <!-- Order Detail Modal -->
      <div *ngIf="selectedOrder" class="modal-overlay" (click)="closeOrderDetails()">
        <div class="modal-content" (click)="$event.stopPropagation()">
          <div class="modal-header">
            <div class="modal-title">
              <img [src]="getSourceLogo(selectedOrder.type)" [alt]="selectedOrder.type" class="modal-logo">
              <div>
                <h3>Sipari≈ü Detayƒ±</h3>
                <span class="modal-platform">{{getSourceText(selectedOrder.type)}}</span>
              </div>
            </div>
            <button (click)="closeOrderDetails()" class="close-btn">‚úï</button>
          </div>
          
          <div class="modal-body">
            <!-- Order Info -->
            <div class="modal-section">
              <h4 class="section-title">üìã Sipari≈ü Bilgileri</h4>
              <div class="info-grid">
                <div class="info-item">
                  <span class="info-label">Sipari≈ü No:</span>
                  <span class="info-value">#{{getOrderId(selectedOrder)}}</span>
                </div>
                <div class="info-item">
                  <span class="info-label">Durum:</span>
                  <span class="status-badge {{getStatusClass(selectedOrder.status)}}">
                    {{getStatusText(selectedOrder.status)}}
                  </span>
                </div>
                <div class="info-item">
                  <span class="info-label">Tip:</span>
                  <span class="info-value">{{getOrderType(selectedOrder)}}</span>
                </div>
                <div class="info-item">
                  <span class="info-label">Tarih:</span>
                  <span class="info-value">{{formatDate(selectedOrder.createdAt)}}</span>
                </div>
              </div>
            </div>

            <!-- Customer Info -->
            <div class="modal-section">
              <h4 class="section-title">üë§ M√º≈üteri Bilgileri</h4>
              <div class="info-grid">
                <div class="info-item">
                  <span class="info-label">Ad Soyad:</span>
                  <span class="info-value">{{getCustomerName(selectedOrder)}}</span>
                </div>
                <div class="info-item">
                  <span class="info-label">Telefon:</span>
                  <span class="info-value">{{getCustomerPhone(selectedOrder)}}</span>
                </div>
                <div *ngIf="getDeliveryAddress(selectedOrder).address" class="info-item full-width">
                  <span class="info-label">Adres:</span>
                  <span class="info-value">{{getDeliveryAddress(selectedOrder).address}}</span>
                </div>
                <div *ngIf="getDeliveryAddress(selectedOrder).doorNo" class="info-item">
                  <span class="info-label">Kapƒ± No:</span>
                  <span class="info-value">{{getDeliveryAddress(selectedOrder).doorNo}}</span>
                </div>
                <div *ngIf="getDeliveryAddress(selectedOrder).floor" class="info-item">
                  <span class="info-label">Kat:</span>
                  <span class="info-value">{{getDeliveryAddress(selectedOrder).floor}}</span>
                </div>
              </div>
            </div>

            <!-- Products -->
            <div class="modal-section">
              <h4 class="section-title">üçΩÔ∏è Sipari≈ü ƒ∞√ßeriƒüi</h4>
              <div class="products-list">
                <div *ngFor="let product of getProducts(selectedOrder)" class="product-detail">
                  <div class="product-header">
                    <span class="product-name">{{getProductName(product)}}</span>
                    <span class="product-quantity">x{{getProductQuantity(product)}}</span>
                    <span class="product-price">{{(product.price || 0).toFixed(2)}} ‚Ç∫</span>
                  </div>
                  
                  <!-- Product Options/Toppings -->
                  <div *ngIf="product.selectedToppings || product.modifierProducts || product.options" class="product-options">
                    <!-- YemekSepeti Toppings -->
                    <div *ngIf="selectedOrder.type === 'YEMEKSEPETI' && product.selectedToppings" class="option-list">
                      <div *ngFor="let topping of product.selectedToppings" class="option-item">
                        ‚Ä¢ {{topping.name}} <span *ngIf="topping.price > 0">(+{{topping.price.toFixed(2)}} ‚Ç∫)</span>
                      </div>
                    </div>
                    
                    <!-- Trendyol Modifiers -->
                    <div *ngIf="selectedOrder.type === 'TRENDYOL' && product.modifierProducts" class="option-list">
                      <div *ngFor="let modifier of product.modifierProducts" class="option-item {{getModifierClass(modifier)}}">
                        {{getModifierSymbol(modifier)}} {{modifier.name}}
                        <span *ngIf="modifier.price > 0">(+{{modifier.price.toFixed(2)}} ‚Ç∫)</span>
                      </div>
                    </div>
                    
                    <!-- Getir Options -->
                    <div *ngIf="selectedOrder.type === 'GETIR' && product.options" class="option-list">
                      <div *ngFor="let category of product.options">
                        <div class="option-category">{{category.name?.tr || category.name?.en}}</div>
                        <div *ngFor="let option of category.options" class="option-item">
                          ‚Ä¢ {{option.name?.tr || option.name?.en}}
                          <span *ngIf="option.price > 0">(+{{option.price.toFixed(2)}} ‚Ç∫)</span>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Migros Options -->
                    <div *ngIf="selectedOrder.type === 'MIGROS' && product.options" class="option-list">
                      <div *ngFor="let option of product.options">
                        <div class="option-category">{{option.headerName}}</div>
                        <div class="option-item">‚Ä¢ {{option.itemNames}}</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Payment Info -->
            <div class="modal-section">
              <h4 class="section-title">üí≥ √ñdeme Bilgileri</h4>
              <div class="info-grid">
                <div class="info-item">
                  <span class="info-label">√ñdeme Tipi:</span>
                  <span class="info-value">{{getPaymentType(selectedOrder)}}</span>
                </div>
                <div class="info-item">
                  <span class="info-label">E≈üle≈ütirme:</span>
                  <span class="payment-mapping-status {{getPaymentMappingClass(selectedOrder)}}">
                    {{getPaymentMappingText(selectedOrder)}}
                  </span>
                </div>
                <div class="info-item full-width">
                  <span class="info-label">Toplam Tutar:</span>
                  <span class="modal-amount">{{formatPrice(getOrderAmount(selectedOrder))}} ‚Ç∫</span>
                </div>
              </div>
            </div>
            
            <!-- Actions -->
            <div class="modal-actions">
              <button 
                *ngIf="canApproveOrder(selectedOrder)"
                (click)="manualApproveOrder(selectedOrder)" 
                class="touch-modal-btn approve">
                <span class="material-icons">check_circle</span>
                <span>Sipari≈üi Onayla</span>
              </button>
              
              <button 
                (click)="printToThermalPrinter(selectedOrder)" 
                class="touch-modal-btn print">
                <span class="material-icons">print</span>
                <span>Termal Yazdƒ±r</span>
              </button>
              
              <button 
                (click)="copyOrderJson(selectedOrder)" 
                class="touch-modal-btn json">
                <span class="material-icons">content_copy</span>
                <span>JSON Kopyala</span>
              </button>
              
              <button 
                (click)="logSystemStatus()" 
                class="touch-modal-btn debug">
                <span class="material-icons">bug_report</span>
                <span>Debug Log</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  `,
  styles: [`
    /* Modern App Container */
    .modern-app {
      display: flex;
      flex-direction: column;
      height: 100vh;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Modern Header */
    .modern-header {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      padding: 20px 0;
    }

    .header-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 24px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 32px;
    }

    /* Brand Section */
    .brand-section {
      display: flex;
      align-items: center;
      gap: 16px;
    }

    .brand-logo {
      position: relative;
    }

    .logo-circle {
      width: 56px;
      height: 56px;
      background: linear-gradient(135deg, #667eea, #764ba2);
      border-radius: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 8px 24px rgba(102, 126, 234, 0.3);
      animation: float 3s ease-in-out infinite;
    }

    .logo-circle .material-icons {
      color: white;
      font-size: 28px;
    }

    .brand-text {
      display: flex;
      flex-direction: column;
    }

    .brand-title {
      font-size: 28px;
      font-weight: 700;
      color: #2d3748;
      margin: 0;
      line-height: 1.2;
    }

    .brand-subtitle {
      font-size: 14px;
      color: #718096;
      margin: 0;
      font-weight: 500;
    }

    .title {
      font-size: 24px;
      font-weight: 600;
      color: #212529;
      margin: 0;
    }

    .header-controls {
      display: flex;
      align-items: center;
      gap: 20px;
    }

    /* Modern Store Selector */
    .store-selector {
      position: relative;
      min-width: 280px;
    }

    .selector-header {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 8px;
    }

    .selector-header .material-icons {
      color: #667eea;
      font-size: 20px;
    }

    .selector-label {
      font-size: 14px;
      font-weight: 600;
      color: #4a5568;
    }

    .custom-select {
      background: white;
      border: 2px solid #e2e8f0;
      border-radius: 16px;
      padding: 16px;
      cursor: pointer;
      transition: all 0.3s ease;
      min-height: 60px;
      min-width: 280px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .select-content {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .store-icon {
      color: #667eea;
      font-size: 24px;
    }

    .custom-select:hover {
      border-color: #667eea;
      box-shadow: 0 8px 20px rgba(102, 126, 234, 0.15);
      transform: translateY(-2px);
    }

    .selected-store {
      flex: 1;
    }

    .store-name {
      font-size: 16px;
      font-weight: 600;
      color: #2d3748;
      margin-bottom: 4px;
    }

    .store-status {
      font-size: 12px;
      color: #718096;
    }

    .dropdown-arrow {
      color: #a0aec0;
      transition: transform 0.3s ease;
    }

    .custom-select:hover .dropdown-arrow {
      color: #667eea;
    }

    /* Store Dropdown */
    .store-dropdown {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background: white;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
      z-index: 1000;
      max-height: 400px;
      overflow: hidden;
      opacity: 0;
      transform: translateY(-10px);
      transition: all 0.3s ease;
      pointer-events: none;
    }

    .store-dropdown.show {
      opacity: 1;
      transform: translateY(0);
      pointer-events: auto;
    }

    .dropdown-search {
      padding: 16px;
      border-bottom: 1px solid #e2e8f0;
      display: flex;
      align-items: center;
      gap: 12px;
      background: #f7fafc;
    }

    .dropdown-search .material-icons {
      color: #a0aec0;
      font-size: 20px;
    }

    .search-input {
      flex: 1;
      border: none;
      outline: none;
      background: transparent;
      font-size: 14px;
      color: #2d3748;
    }

    .store-list {
      max-height: 320px;
      overflow-y: auto;
    }

    .store-item {
      padding: 16px;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #f1f5f9;
    }

    .store-item:hover {
      background: #f7fafc;
    }

    .store-item.selected {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
    }

    .store-item.selected .store-title {
      color: white;
    }

    .store-item.selected .store-code {
      color: rgba(255, 255, 255, 0.8);
    }

    .store-info {
      flex: 1;
    }

    .store-title {
      font-size: 16px;
      font-weight: 600;
      color: #2d3748;
      margin-bottom: 4px;
    }

    .store-code {
      font-size: 12px;
      color: #718096;
    }

    .check-icon {
      color: white;
      font-size: 24px;
    }

    /* Top Controls Layout */
    .top-controls {
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex: 1;
      gap: 24px;
    }

    .right-controls {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    /* Compact Controls */
    .compact-control {
      background: white;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      padding: 12px;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 8px;
      min-width: 100px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      touch-action: manipulation;
      user-select: none;
    }

    .compact-control:hover {
      border-color: #667eea;
      box-shadow: 0 6px 16px rgba(102, 126, 234, 0.15);
      transform: translateY(-2px);
    }

    .compact-control:active {
      transform: translateY(0) scale(0.98);
    }

    .compact-control.active {
      border-color: #667eea;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
    }

    .compact-control.loading {
      border-color: #667eea;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05));
    }

    .compact-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: #f7fafc;
      transition: all 0.3s ease;
    }

    .compact-control.active .compact-icon {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
    }

    .compact-icon .material-icons {
      font-size: 20px;
      color: #4a5568;
    }

    .compact-control.active .compact-icon .material-icons {
      color: white;
    }

    .compact-text {
      flex: 1;
    }

    .compact-title {
      font-size: 12px;
      font-weight: 600;
      color: #2d3748;
      line-height: 1.2;
    }

    .compact-status {
      font-size: 10px;
      color: #718096;
      margin-top: 2px;
    }

    .control-panel {
      display: flex;
      gap: 16px;
    }

    .control-card {
      background: white;
      border: 2px solid #e2e8f0;
      border-radius: 16px;
      padding: 16px;
      min-width: 140px;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      touch-action: manipulation;
      user-select: none;
    }

    .control-card:hover {
      border-color: #667eea;
      box-shadow: 0 8px 24px rgba(102, 126, 234, 0.15);
      transform: translateY(-3px);
    }

    .control-card:active {
      transform: translateY(-1px) scale(0.98);
    }

    .control-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: #f7fafc;
      transition: all 0.3s ease;
    }

    .control-icon.active {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .control-icon .material-icons {
      font-size: 24px;
    }

    .control-info {
      flex: 1;
    }

    .control-title {
      font-size: 14px;
      font-weight: 600;
      color: #2d3748;
      margin-bottom: 4px;
    }

    .control-status {
      font-size: 12px;
      color: #718096;
    }

    .control-toggle {
      margin-left: auto;
    }

    /* Modern Toggle Switch */
    .toggle-switch {
      width: 48px;
      height: 24px;
      background: #e2e8f0;
      border-radius: 12px;
      position: relative;
      transition: all 0.3s ease;
      cursor: pointer;
    }

    .toggle-switch.on {
      background: linear-gradient(135deg, #667eea, #764ba2);
    }

    .toggle-slider {
      width: 20px;
      height: 20px;
      background: white;
      border-radius: 50%;
      position: absolute;
      top: 2px;
      left: 2px;
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    .toggle-switch.on .toggle-slider {
      transform: translateX(24px);
    }

    .refresh-card.loading {
      border-color: #667eea;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05));
    }

    /* User Profile */
    .user-profile {
      display: flex;
      align-items: center;
      gap: 12px;
      background: white;
      border: 2px solid #e2e8f0;
      border-radius: 16px;
      padding: 12px 16px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .profile-info {
      text-align: right;
    }

    .profile-name {
      font-size: 16px;
      font-weight: 600;
      color: #2d3748;
    }

    .profile-store {
      font-size: 12px;
      color: #718096;
      margin-top: 2px;
    }

    .profile-avatar {
      width: 40px;
      height: 40px;
      background: linear-gradient(135deg, #a0aec0, #718096);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .profile-avatar .material-icons {
      color: white;
      font-size: 24px;
    }

    .logout-button {
      width: 40px;
      height: 40px;
      background: linear-gradient(135deg, #f56565, #e53e3e);
      border: none;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(245, 101, 101, 0.3);
    }

    .logout-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(245, 101, 101, 0.4);
    }

    .logout-button:active {
      transform: translateY(0) scale(0.95);
    }

    .logout-button .material-icons {
      color: white;
      font-size: 20px;
    }

    /* Dokunmatik ekran i√ßin b√ºy√ºk butonlar */
    .touch-btn {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 8px;
      padding: 16px 20px;
      min-width: 100px;
      min-height: 80px;
      border: 3px solid #e5e7eb;
      border-radius: 16px;
      background: white;
      color: #6b7280;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      touch-action: manipulation;
      user-select: none;
    }

    .touch-btn:hover {
      border-color: #d1d5db;
      background: #f9fafb;
      transform: translateY(-2px);
      box-shadow: 0 8px 16px rgba(0,0,0,0.1);
    }

    .touch-btn:active {
      transform: translateY(0) scale(0.98);
      transition: all 0.1s ease;
    }

    .touch-btn.active {
      border-color: #3b82f6;
      background: linear-gradient(135deg, #3b82f6, #2563eb);
      color: white;
      box-shadow: 0 8px 20px rgba(59, 130, 246, 0.4);
    }

    .touch-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .btn-icon {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .btn-icon .material-icons {
      font-size: 28px;
    }

    .btn-text {
      text-align: center;
    }

    .btn-title {
      font-size: 14px;
      font-weight: 600;
      line-height: 1.2;
    }

    .btn-status {
      font-size: 11px;
      opacity: 0.8;
      margin-top: 2px;
    }

    .pulse-indicator {
      position: absolute;
      top: 12px;
      right: 12px;
      width: 12px;
      height: 12px;
      background: #10b981;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    /* Logout butonu */
    .touch-btn-logout {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 12px 20px;
      min-height: 48px;
      border: 3px solid #dc3545;
      border-radius: 12px;
      background: linear-gradient(135deg, #dc3545, #c82333);
      color: white;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      touch-action: manipulation;
      user-select: none;
    }

    .touch-btn-logout:hover {
      background: linear-gradient(135deg, #c82333, #b21e2b);
      transform: translateY(-2px);
      box-shadow: 0 8px 16px rgba(220, 53, 69, 0.4);
    }

    .touch-btn-logout:active {
      transform: translateY(0) scale(0.98);
    }

    .touch-btn-logout .material-icons {
      font-size: 20px;
    }

    /* User Section */
    .user-section {
      display: flex;
      align-items: center;
      gap: 12px;
      background: white;
      border: 2px solid #e2e8f0;
      border-radius: 16px;
      padding: 12px 16px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .user-info {
      text-align: right;
    }

    .user-name {
      font-size: 14px;
      color: #2d3748;
      font-weight: 600;
      line-height: 1.2;
    }

    .user-role {
      font-size: 11px;
      color: #718096;
      margin-top: 2px;
    }

    .user-avatar {
      width: 36px;
      height: 36px;
      background: linear-gradient(135deg, #667eea, #764ba2);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .user-avatar .material-icons {
      color: white;
      font-size: 20px;
    }

    .logout-btn {
      display: flex;
      align-items: center;
      gap: 6px;
      background: linear-gradient(135deg, #f56565, #e53e3e);
      border: none;
      border-radius: 12px;
      padding: 8px 12px;
      color: white;
      font-size: 12px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(245, 101, 101, 0.3);
      touch-action: manipulation;
      user-select: none;
    }

    .logout-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 16px rgba(245, 101, 101, 0.4);
    }

    .logout-btn:active {
      transform: translateY(0) scale(0.98);
    }

    .logout-btn .material-icons {
      font-size: 16px;
    }

    .logout-text {
      font-weight: 600;
    }

    .status-bar {
      background: white;
      border-bottom: 1px solid #dee2e6;
      padding: 15px 20px;
    }

    .status-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      max-width: 1200px;
      margin: 0 auto;
    }

    .total-count {
      font-size: 14px;
      font-weight: 500;
      color: #495057;
    }

    .sync-status {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 6px 12px;
      background: #e9ecef;
      border-radius: 20px;
    }

    .background-sync-status {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-left: 12px;
      padding-left: 12px;
      border-left: 1px solid #ced4da;
    }

    .sync-item {
      display: flex;
      align-items: center;
      gap: 4px;
    }

    .sync-platform {
      font-size: 10px;
      font-weight: 600;
      color: #6c757d;
      min-width: 16px;
      text-align: center;
    }

    .sync-dot {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background: #dc3545;
      transition: all 0.3s ease;
    }

    .sync-dot.active {
      background: #28a745;
      box-shadow: 0 0 6px rgba(40, 167, 69, 0.6);
      animation: pulse-green 2s infinite;
    }

    /* Modern Platform Filters */
    .platform-filters {
      padding: 16px 0;
    }

    .filter-chips {
      display: flex;
      gap: 12px;
      overflow-x: auto;
      padding: 8px 0;
    }

    .filter-chip {
      background: rgba(255, 255, 255, 0.9);
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 16px;
      padding: 12px 16px;
      min-width: 120px;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 10px;
      backdrop-filter: blur(10px);
      touch-action: manipulation;
      user-select: none;
      flex-shrink: 0;
    }

    .filter-chip:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    }

    .filter-chip:active {
      transform: translateY(0) scale(0.98);
    }

    .filter-chip.active {
      background: white;
      border-color: #667eea;
      box-shadow: 0 8px 24px rgba(102, 126, 234, 0.2);
      transform: translateY(-2px);
    }

    .chip-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: #f7fafc;
    }

    .chip-icon .material-icons {
      font-size: 18px;
      color: #4a5568;
    }

    .platform-emoji {
      font-size: 18px;
    }

    .chip-text {
      flex: 1;
    }

    .chip-label {
      font-size: 13px;
      font-weight: 600;
      color: #2d3748;
      display: block;
    }

    .chip-count {
      font-size: 16px;
      font-weight: 700;
      color: #667eea;
      display: block;
      margin-top: 2px;
    }

    /* Platform-specific chip colors */
    .yemeksepeti-chip.active {
      background: linear-gradient(135deg, #0066cc, #004499);
      color: white;
    }

    .yemeksepeti-chip.active .chip-label,
    .yemeksepeti-chip.active .chip-count {
      color: white;
    }

    .yemeksepeti-chip.active .chip-icon {
      background: rgba(255, 255, 255, 0.2);
    }

    .trendyol-chip.active {
      background: linear-gradient(135deg, #f27a1a, #e6690a);
      color: white;
    }

    .trendyol-chip.active .chip-label,
    .trendyol-chip.active .chip-count {
      color: white;
    }

    .trendyol-chip.active .chip-icon {
      background: rgba(255, 255, 255, 0.2);
    }

    .migros-chip.active {
      background: linear-gradient(135deg, #00a651, #008a44);
      color: white;
    }

    .migros-chip.active .chip-label,
    .migros-chip.active .chip-count {
      color: white;
    }

    .migros-chip.active .chip-icon {
      background: rgba(255, 255, 255, 0.2);
    }

    .getir-chip.active {
      background: linear-gradient(135deg, #5d3ebc, #4a329a);
      color: white;
    }

    .getir-chip.active .chip-label,
    .getir-chip.active .chip-count {
      color: white;
    }

    .getir-chip.active .chip-icon {
      background: rgba(255, 255, 255, 0.2);
    }

    /* Dokunmatik platform filter butonlarƒ± */
    .touch-filter-btn {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 6px;
      padding: 12px 16px;
      min-width: 80px;
      min-height: 70px;
      border: 3px solid #e5e7eb;
      border-radius: 12px;
      background: white;
      color: #6b7280;
      cursor: pointer;
      transition: all 0.3s ease;
      touch-action: manipulation;
      user-select: none;
      flex-shrink: 0;
    }

    .touch-filter-btn:hover {
      border-color: #d1d5db;
      background: #f9fafb;
      transform: translateY(-2px);
      box-shadow: 0 6px 12px rgba(0,0,0,0.1);
    }

    .touch-filter-btn:active {
      transform: translateY(0) scale(0.98);
      transition: all 0.1s ease;
    }

    .touch-filter-btn.active {
      background: #374151;
      color: white;
      border-color: #374151;
      transform: translateY(-2px);
      box-shadow: 0 8px 16px rgba(55, 65, 81, 0.3);
    }

    .filter-yemeksepeti.active {
      background: linear-gradient(135deg, #0066cc, #004499);
      border-color: #0066cc;
      box-shadow: 0 8px 16px rgba(0, 102, 204, 0.4);
    }

    .filter-trendyol.active {
      background: linear-gradient(135deg, #f27a1a, #e6690a);
      border-color: #f27a1a;
      box-shadow: 0 8px 16px rgba(242, 122, 26, 0.4);
    }

    .filter-migros.active {
      background: linear-gradient(135deg, #00a651, #008a44);
      border-color: #00a651;
      box-shadow: 0 8px 16px rgba(0, 166, 81, 0.4);
    }

    .filter-getir.active {
      background: linear-gradient(135deg, #5d3ebc, #4a329a);
      border-color: #5d3ebc;
      box-shadow: 0 8px 16px rgba(93, 62, 188, 0.4);
    }

    .filter-icon {
      font-size: 20px;
    }

    .filter-content {
      text-align: center;
    }

    .filter-name {
      font-size: 12px;
      font-weight: 600;
      line-height: 1.2;
    }

    .filter-count {
      font-size: 14px;
      font-weight: 700;
      margin-top: 2px;
    }

    .order-id-section {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 8px;
    }

    .new-badge {
      background: linear-gradient(45deg, #ef4444, #dc2626);
      color: white;
      font-size: 10px;
      font-weight: bold;
      padding: 2px 6px;
      border-radius: 10px;
      animation: pulse 2s infinite;
    }

    .platform-info {
      display: flex;
      align-items: center;
      gap: 6px;
    }

    .platform-logo {
      width: 20px;
      height: 20px;
      object-fit: contain;
      border-radius: 4px;
    }

    .order-status {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 12px;
    }

    .status-badge {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: 600;
      text-transform: uppercase;
    }

    .order-type {
      font-size: 11px;
      color: #6b7280;
      background: #f3f4f6;
      padding: 2px 6px;
      border-radius: 8px;
    }

    .products-preview {
      background: #f8f9fa;
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 12px;
      font-size: 13px;
    }

    .product-item {
      color: #495057;
      margin-bottom: 4px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .more-products {
      color: #007bff;
      font-weight: 500;
      font-style: italic;
    }

    .order-actions {
      display: flex;
      gap: 8px;
      margin-bottom: 16px;
      flex-wrap: wrap;
    }

    /* Dokunmatik action butonlarƒ± */
    .touch-action-btn {
      display: flex;
      align-items: center;
      gap: 6px;
      padding: 12px 16px;
      min-height: 44px;
      border: none;
      border-radius: 10px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      touch-action: manipulation;
      user-select: none;
      flex: 1;
      justify-content: center;
    }

    .touch-action-btn:active {
      transform: scale(0.95);
      transition: all 0.1s ease;
    }

    .touch-action-btn .material-icons {
      font-size: 18px;
    }

    .approve-btn {
      background: linear-gradient(135deg, #28a745, #20c997);
      color: white;
      box-shadow: 0 4px 8px rgba(40, 167, 69, 0.2);
    }

    .approve-btn:hover {
      background: linear-gradient(135deg, #20c997, #17a2b8);
      transform: translateY(-2px);
      box-shadow: 0 6px 12px rgba(40, 167, 69, 0.3);
    }

    .print-btn {
      background: linear-gradient(135deg, #fd7e14, #e8690b);
      color: white;
      box-shadow: 0 4px 8px rgba(253, 126, 20, 0.2);
    }

    .print-btn:hover {
      background: linear-gradient(135deg, #e8690b, #dc5a09);
      transform: translateY(-2px);
      box-shadow: 0 6px 12px rgba(253, 126, 20, 0.3);
    }

    .json-btn {
      background: linear-gradient(135deg, #6c757d, #5a6268);
      color: white;
      box-shadow: 0 4px 8px rgba(108, 117, 125, 0.2);
    }

    .json-btn:hover {
      background: linear-gradient(135deg, #5a6268, #495057);
      transform: translateY(-2px);
      box-shadow: 0 6px 12px rgba(108, 117, 125, 0.3);
    }

    .sync-indicator {
      width: 8px;
      height: 8px;
      background: #007bff;
      border-radius: 50%;
      animation: pulse 1s infinite;
    }

    .sync-text {
      font-size: 12px;
      color: #495057;
      font-weight: 500;
    }

    .main-content {
      flex: 1;
      padding: 20px;
      overflow: auto;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }

    .loading-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 400px;
    }

    .spinner {
      width: 50px;
      height: 50px;
      border: 4px solid #f3f3f3;
      border-top: 4px solid #007bff;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    .loading-text {
      margin-top: 20px;
      color: #6c757d;
      font-size: 16px;
    }

    .no-orders {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 400px;
      background: white;
      border-radius: 12px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      text-align: center;
    }

    .no-orders-icon {
      font-size: 64px;
      margin-bottom: 20px;
      opacity: 0.5;
    }

    .no-orders-title {
      color: #495057;
      margin-bottom: 10px;
      font-size: 20px;
    }

    .no-orders-text {
      color: #6c757d;
      margin-bottom: 20px;
    }

    .connection-status {
      font-size: 14px;
      color: #6c757d;
    }

    .status-active {
      color: #28a745;
      font-weight: 600;
    }

    .orders-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
      gap: 24px;
      padding: 20px 0;
    }

    /* Dokunmatik ekran i√ßin b√ºy√ºk sipari≈ü kartlarƒ± */
    .order-card {
      background: white;
      border-radius: 16px;
      box-shadow: 0 6px 12px rgba(0,0,0,0.1);
      padding: 24px;
      cursor: pointer;
      transition: all 0.3s ease;
      border-left: 6px solid #007bff;
      position: relative;
      min-height: 200px;
      touch-action: manipulation;
      user-select: none;
    }

    .order-card.new-order {
      border-left: 4px solid #ef4444;
      animation: newOrderPulse 2s ease-in-out infinite;
      box-shadow: 0 0 20px rgba(239, 68, 68, 0.3);
    }

    .order-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 15px rgba(0,0,0,0.15);
    }

    .order-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }

    .order-info {
      display: flex;
      flex-direction: column;
      gap: 5px;
    }

    .order-id {
      font-weight: 600;
      color: #212529;
      font-size: 16px;
    }

    .order-platform {
      font-size: 12px;
      color: #6c757d;
      padding: 2px 8px;
      background: #e9ecef;
      border-radius: 12px;
      width: fit-content;
    }

    .order-amount {
      font-weight: 700;
      color: #28a745;
      font-size: 18px;
    }

    .customer-info {
      background: #f8f9fa;
      padding: 12px;
      border-radius: 8px;
      margin-bottom: 15px;
    }

    .customer-name {
      font-weight: 500;
      color: #212529;
      margin-bottom: 5px;
    }

    .customer-phone {
      font-size: 13px;
      color: #6c757d;
    }

    .order-time {
      font-size: 12px;
      color: #adb5bd;
      text-align: right;
      border-top: 1px solid #dee2e6;
      padding-top: 10px;
    }

    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0,0,0,0.5);
      z-index: 1000;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .modal-content {
      background: white;
      border-radius: 12px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.3);
      max-width: 800px;
      width: 95%;
      max-height: 90vh;
      overflow: auto;
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px;
      border-bottom: 1px solid #dee2e6;
    }

    .modal-header h3 {
      margin: 0;
      font-size: 18px;
      color: #212529;
    }

    .close-btn {
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: #6c757d;
      padding: 0;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .close-btn:hover {
      color: #495057;
    }

    .modal-body {
      padding: 20px;
      text-align: center;
    }

    .modal-body h4 {
      font-size: 20px;
      margin-bottom: 10px;
      color: #212529;
    }

    .modal-body p {
      color: #6c757d;
      margin-bottom: 10px;
    }

    .modal-amount {
      font-size: 24px;
      font-weight: 700;
      color: #28a745 !important;
      margin: 20px 0 !important;
    }

    .modal-actions {
      display: flex;
      gap: 10px;
      justify-content: center;
      margin-top: 20px;
    }

    .action-btn {
      padding: 12px 24px;
      background: #fd7e14;
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 500;
      transition: background 0.2s;
    }

    .action-btn:hover {
      background: #e8690b;
    }

    .modal-title {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .modal-logo {
      width: 32px;
      height: 32px;
      object-fit: contain;
      border-radius: 6px;
    }

    .modal-platform {
      font-size: 14px;
      color: #6b7280;
      font-weight: 500;
    }

    .modal-section {
      margin-bottom: 24px;
      padding-bottom: 20px;
      border-bottom: 1px solid #e5e7eb;
    }

    .modal-section:last-of-type {
      border-bottom: none;
      margin-bottom: 0;
    }

    .section-title {
      font-size: 16px;
      font-weight: 600;
      color: #374151;
      margin-bottom: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .info-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 12px;
    }

    .info-item {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }

    .info-item.full-width {
      grid-column: 1 / -1;
    }

    .info-label {
      font-size: 12px;
      color: #6b7280;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .info-value {
      font-size: 14px;
      color: #374151;
      font-weight: 500;
    }

    .payment-mapping-status {
      font-size: 14px;
      font-weight: 600;
    }

    .text-green-600 {
      color: #059669;
    }

    .text-red-500 {
      color: #dc2626;
    }

    .products-list {
      space-y: 16px;
    }

    .product-detail {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 16px;
      margin-bottom: 16px;
    }

    .product-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 12px;
      padding-bottom: 8px;
      border-bottom: 1px solid #e9ecef;
    }

    .product-name {
      font-weight: 600;
      color: #212529;
      flex: 1;
    }

    .product-quantity {
      font-weight: 500;
      color: #6c757d;
      margin: 0 12px;
    }

    .product-price {
      font-weight: 600;
      color: #28a745;
    }

    .product-options {
      margin-top: 8px;
    }

    .option-list {
      space-y: 4px;
    }

    .option-category {
      font-weight: 600;
      color: #495057;
      margin-top: 8px;
      margin-bottom: 4px;
      font-size: 13px;
    }

    .option-item {
      font-size: 13px;
      color: #6c757d;
      padding-left: 12px;
      margin-bottom: 2px;
    }

    .option-item.unwanted {
      color: #dc3545;
      text-decoration: line-through;
    }

    .modal-actions {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 16px;
      margin-top: 24px;
      padding-top: 20px;
      border-top: 1px solid #e5e7eb;
    }

    /* Dokunmatik modal butonlarƒ± */
    .touch-modal-btn {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 8px;
      padding: 16px 20px;
      min-height: 70px;
      border: none;
      border-radius: 12px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 14px;
      touch-action: manipulation;
      user-select: none;
    }

    .touch-modal-btn:active {
      transform: scale(0.95);
      transition: all 0.1s ease;
    }

    .touch-modal-btn .material-icons {
      font-size: 24px;
    }

    .touch-modal-btn.approve {
      background: linear-gradient(135deg, #28a745, #20c997);
      color: white;
      box-shadow: 0 6px 12px rgba(40, 167, 69, 0.2);
    }

    .touch-modal-btn.approve:hover {
      background: linear-gradient(135deg, #20c997, #17a2b8);
      transform: translateY(-3px);
      box-shadow: 0 8px 16px rgba(40, 167, 69, 0.3);
    }

    .touch-modal-btn.print {
      background: linear-gradient(135deg, #fd7e14, #e8690b);
      color: white;
      box-shadow: 0 6px 12px rgba(253, 126, 20, 0.2);
    }

    .touch-modal-btn.print:hover {
      background: linear-gradient(135deg, #e8690b, #dc5a09);
      transform: translateY(-3px);
      box-shadow: 0 8px 16px rgba(253, 126, 20, 0.3);
    }

    .touch-modal-btn.json {
      background: linear-gradient(135deg, #6c757d, #5a6268);
      color: white;
      box-shadow: 0 6px 12px rgba(108, 117, 125, 0.2);
    }

    .touch-modal-btn.json:hover {
      background: linear-gradient(135deg, #5a6268, #495057);
      transform: translateY(-3px);
      box-shadow: 0 8px 16px rgba(108, 117, 125, 0.3);
    }

    .touch-modal-btn.debug {
      background: linear-gradient(135deg, #6f42c1, #5a32a3);
      color: white;
      box-shadow: 0 6px 12px rgba(111, 66, 193, 0.2);
    }

    .touch-modal-btn.debug:hover {
      background: linear-gradient(135deg, #5a32a3, #4c2a85);
      transform: translateY(-3px);
      box-shadow: 0 8px 16px rgba(111, 66, 193, 0.3);
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.5; }
      100% { opacity: 1; }
    }
    
    @keyframes pulse-green {
      0% { 
        opacity: 1; 
        transform: scale(1);
      }
      50% { 
        opacity: 0.7; 
        transform: scale(1.2);
      }
      100% { 
        opacity: 1; 
        transform: scale(1);
      }
    }

    @keyframes float {
      0%, 100% {
        transform: translateY(0) rotate(0deg);
      }
      50% {
        transform: translateY(-5px) rotate(2deg);
      }
    }

    @keyframes newOrderPulse {
      0% {
        transform: scale(1);
        opacity: 1;
        box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);
      }
      25% {
        transform: scale(1.02);
        opacity: 0.9;
        box-shadow: 0 0 0 10px rgba(239, 68, 68, 0.5);
      }
      50% {
        transform: scale(1.05);
        opacity: 0.8;
        box-shadow: 0 0 0 20px rgba(239, 68, 68, 0.3);
      }
      75% {
        transform: scale(1.02);
        opacity: 0.9;
        box-shadow: 0 0 0 10px rgba(239, 68, 68, 0.5);
      }
      100% {
        transform: scale(1);
        opacity: 1;
        box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);
      }
    }

    /* Responsive tasarƒ±m - Dokunmatik ekranlar i√ßin */
    @media (max-width: 768px) {
      .header-container {
        flex-direction: column;
        gap: 16px;
        align-items: stretch;
        padding: 0 16px;
      }

      .top-controls {
        flex-direction: column;
        gap: 16px;
        align-items: stretch;
      }

      .right-controls {
        flex-wrap: wrap;
        justify-content: center;
        gap: 8px;
      }

      .compact-control {
        min-width: 90px;
        padding: 10px;
      }

      .store-selector {
        width: 100%;
      }

      .custom-select {
        min-width: 100%;
      }

      .control-buttons {
        justify-content: center;
      }

      .touch-btn {
        min-width: 120px;
        min-height: 90px;
      }

      .store-select-container {
        min-width: 100%;
      }

      .platform-filters {
        justify-content: center;
        gap: 8px;
      }

      .touch-filter-btn {
        min-width: 70px;
        min-height: 60px;
        padding: 8px 12px;
      }

      .filter-name {
        font-size: 10px;
      }

      .orders-grid {
        grid-template-columns: 1fr;
        gap: 16px;
        padding: 16px;
      }

      .order-card {
        min-height: 180px;
        padding: 20px;
      }

      .order-actions {
        flex-direction: column;
        gap: 12px;
      }

      .touch-action-btn {
        flex: none;
        width: 100%;
        min-height: 50px;
      }

      .modal-content {
        width: 95%;
        max-height: 95vh;
        margin: 20px;
      }

      .modal-actions {
        grid-template-columns: 1fr;
        gap: 12px;
      }

      .touch-modal-btn {
        min-height: 60px;
        padding: 14px 16px;
      }
    }

    /* Tablet optimizasyonu */
    @media (min-width: 769px) and (max-width: 1024px) {
      .orders-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
      }

      .touch-btn {
        min-width: 110px;
        min-height: 85px;
      }

      .touch-filter-btn {
        min-width: 75px;
        min-height: 65px;
      }
    }

    /* B√ºy√ºk ekranlar */
    @media (min-width: 1400px) {
      .orders-grid {
        grid-template-columns: repeat(auto-fill, minmax(420px, 1fr));
        gap: 28px;
      }

      .order-card {
        min-height: 220px;
        padding: 28px;
      }
    }

    /* Touch-friendly scrollbar */
    @media (pointer: coarse) {
      ::-webkit-scrollbar {
        width: 12px;
        height: 12px;
      }

      ::-webkit-scrollbar-thumb {
        border-radius: 6px;
        background: #cbd5e1;
        border: 2px solid #f1f5f9;
      }

      ::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
      }
    }
  `]
})
export class OrdersComponent implements OnInit, OnDestroy {
  orders: Order[] = [];
  filteredOrders: Order[] = [];
  stores: any[] = [];
  selectedStore: string = '';
  selectedOrder: Order | null = null;
  loading: boolean = false;
  isRefreshing: boolean = false;
  currentFilter: string = 'ALL';
  showStoreDropdown: boolean = false;
  storeSearchTerm: string = '';
  
  // Summary data
  summary = {
    total: 0,
    byType: {
      trendyol: 0,
      yemeksepeti: 0,
      migros: 0,
      getir: 0
    }
  };

  // Ses sistemi
  private audio: HTMLAudioElement | null = null;
  private audioInstances: { [key: string]: HTMLAudioElement } = {};
  isSoundEnabled: boolean = true;
  isPlaying: boolean = false;
  private soundInterval: any = null;
  private audioEndedListener: (() => void) | null = null;

  // Otomatik onay sistemi
  isAutoApproveEnabled: boolean = false;
  private newOrders: Set<string> = new Set();
  private approvedOrders: Set<string> = new Set();

  // Error handling
  private consecutiveFailures: number = 0;
  private readonly MAX_CONSECUTIVE_FAILURES = 5;
  private readonly AUTO_RELOAD_DELAY_MS = 60000;
  private lastRefreshTime: number = 0;
  private readonly MIN_REFRESH_INTERVAL_MS = 8000;
  private readonly SILENT_REFRESH_TIMEOUT_MS = 20000;
  private destroyed: boolean = false;
  private isPageVisible: boolean = true;

  private refreshInterval: Subscription = new Subscription();

  constructor(
    private router: Router,
    private authService: AuthService,
    private entegreSiparisService: EntegreSiparisService,
    private notificationService: NotificationService,
    private http: HttpClient
  ) {}

  ngOnInit() {
    this.loadStores();
    this.setupRefreshInterval();
    this.initializeAudio();
    
    // Ses ayarlarƒ±nƒ± y√ºkle
    const savedSoundSetting = localStorage.getItem('soundEnabled');
    this.isSoundEnabled = savedSoundSetting !== 'false';
    
    // Otomatik onay ayarƒ±nƒ± y√ºkle
    const savedAutoApprove = localStorage.getItem('autoApproveEnabled');
    this.isAutoApproveEnabled = savedAutoApprove === 'true';
    
    // Page Visibility API
    this.setupPageVisibilityListener();
  }

  ngOnDestroy() {
    this.destroyed = true;
    
    if (this.refreshInterval) this.refreshInterval.unsubscribe();
    this.stopSoundLoop();
    
    // Audio cleanup
    if (this.audio && this.audioEndedListener) {
      this.audio.removeEventListener('ended', this.audioEndedListener);
    }
    
    // Background sync sistemlerini durdur
    this.entegreSiparisService.destroy();
    
    console.log('üóëÔ∏è OrdersComponent destroyed');
  }

  private setupRefreshInterval(): void {
    this.refreshInterval = interval(10000).subscribe(() => {
      if (this.selectedStore && !this.loading && !this.destroyed && this.isPageVisible) {
        this.silentRefresh();
        
        // Her 10 dakikada bir memory cleanup
        if (Date.now() % 600000 < 10000) {
          this.performMemoryCleanup();
        }
      }
    });
  }

  private loadStores(): void {
    try {
      const storedMagazalar = localStorage.getItem('magazalar');
      if (storedMagazalar) {
        this.stores = JSON.parse(storedMagazalar);
        console.log('Maƒüazalar y√ºklendi:', this.stores.length);

        const previouslySelectedStore = localStorage.getItem('selectedStore');
        if (previouslySelectedStore && this.stores.find(s => s._id === previouslySelectedStore)) {
          this.selectedStore = previouslySelectedStore;
        } else if (this.stores.length > 0) {
          this.selectedStore = this.stores[0]._id;
          localStorage.setItem('selectedStore', this.selectedStore);
        }

        if (this.selectedStore) {
          this.loadOrders();
          // ƒ∞lk maƒüaza se√ßildikten sonra background sync'leri ba≈ülat
          this.startBackgroundSyncs(this.selectedStore);
        }
      }
    } catch (error) {
      console.error('Maƒüaza verisi parse hatasƒ±:', error);
    }
  }

  onStoreChange(storeId: string): void {
    this.selectedStore = storeId;
    localStorage.setItem('selectedStore', storeId);
    this.loadOrders();
    
    // Background sync sistemlerini yeni maƒüaza i√ßin ba≈ülat
    this.startBackgroundSyncs(storeId);
  }

  private loadOrders(): void {
    if (!this.selectedStore) return;
    
    this.loading = true;
    this.entegreSiparisService.getAggregatedOrders(this.selectedStore).subscribe({
      next: (response) => {
        if (response.success && response.data) {
          console.log('üì¶ API Response alƒ±ndƒ±:', {
            success: response.success,
            orderCount: response.data.orders?.length || 0,
            hasData: !!response.data
          });
          
          // Sipari≈üleri process et
          this.processOrders(response.data.orders || []);
          
          // Filtreyi uygula
          this.filteredOrder(this.currentFilter);
          
          console.log('‚úÖ Sipari≈üler y√ºklendi ve i≈ülendi:', this.orders.length);
        }
        this.loading = false;
      },
      error: (error) => {
        console.error('Sipari≈ü y√ºkleme hatasƒ±:', error);
        this.loading = false;
      }
    });
  }

  private silentRefresh(): void {
    // G√ºvenlik kontrolleri
    if (!this.selectedStore || this.destroyed) {
      console.log('‚ùå Silent refresh iptal: Store yok veya component destroyed');
      return;
    }

    if (this.isRefreshing) {
      console.log('‚è≥ √ñnceki silent refresh hen√ºz bitmedi, yeni istek engellendi');
      return;
    }

    if (this.loading) {
      console.log('‚è≥ Loading durumunda silent refresh atlandƒ±');
      return;
    }

    // Minimum interval kontrol√º (debouncing)
    const now = Date.now();
    if (now - this.lastRefreshTime < this.MIN_REFRESH_INTERVAL_MS) {
      console.log('‚è±Ô∏è √áok hƒ±zlƒ± refresh denemesi engellendi, minimum 8 saniye bekle');
      return;
    }

    if (!this.isPageVisible) {
      console.log('üëÅÔ∏è Sayfa g√∂r√ºn√ºr deƒüil, silent refresh atlandƒ±');
      return;
    }

    console.log('üîÑ Silent refresh ba≈ülatƒ±ldƒ±...');
    this.isRefreshing = true;
    this.lastRefreshTime = now;

    // Timeout ile request'i sƒ±nƒ±rla
    const timeoutId = setTimeout(() => {
      if (this.isRefreshing && !this.destroyed) {
        console.warn('‚è∞ Silent refresh timeout (20s) - flag sƒ±fƒ±rlanƒ±yor');
        this.isRefreshing = false;
        this.consecutiveFailures++;
        this.handleConsecutiveFailures();
      }
    }, this.SILENT_REFRESH_TIMEOUT_MS);
    
    this.entegreSiparisService.getAggregatedOrders(this.selectedStore).subscribe({
      next: (response) => {
        clearTimeout(timeoutId);
        
        if (this.destroyed) {
          console.log('üóëÔ∏è Component destroyed during silent refresh response');
          this.isRefreshing = false;
          return;
        }

        if (response.success && response.data) {
          const previousOrderIds = new Set(this.orders.map(o => this.getOrderId(o)));
          
          // Sipari≈üleri process et (guide'daki gibi)
          this.processOrders(response.data.orders || []);
          
          // Filtreyi yeniden uygula
          this.filteredOrder(this.currentFilter);
          
          // Yeni sipari≈üleri tespit et
          this.checkForNewOrders(previousOrderIds);
          
          // Otomatik onaylama
          if (this.isAutoApproveEnabled && !this.destroyed) {
            this.checkAndApproveOrders();
          }

          // Ba≈üarƒ±lƒ± refresh sonrasƒ± failure sayacƒ±nƒ± sƒ±fƒ±rla
          this.consecutiveFailures = 0;
          
          console.log(`‚úÖ Silent refresh tamamlandƒ±: ${this.orders.length} sipari≈ü aktif`);
        }
        this.isRefreshing = false;
      },
      error: (error) => {
        clearTimeout(timeoutId);
        
        if (this.destroyed) {
          console.log('üóëÔ∏è Component destroyed during silent refresh error');
          return;
        }

        console.error('üí• Silent refresh API hatasƒ±:', error);
        this.isRefreshing = false;
        this.consecutiveFailures++;
        this.handleConsecutiveFailures();
      }
    });
  }

  private handleConsecutiveFailures(): void {
    if (this.consecutiveFailures >= this.MAX_CONSECUTIVE_FAILURES) {
      console.error(`üí• ${this.consecutiveFailures} ardƒ±≈üƒ±k hata tespit edildi!`);
      
      this.notificationService.showNotification(
        `S√ºrekli baƒülantƒ± hatasƒ± tespit edildi (${this.consecutiveFailures} kez). Uygulama 60 saniye i√ßinde otomatik yenilenecek...`,
        'error',
        'top-end',
        10000
      );

      // 60 saniye sonra otomatik reload
      setTimeout(() => {
        if (!this.destroyed) {
          console.log('üîÑ Ardƒ±≈üƒ±k hata nedeniyle otomatik reload ger√ßekle≈ütiriliyor...');
          window.location.reload();
        }
      }, this.AUTO_RELOAD_DELAY_MS);
    }
  }

  private checkForNewOrders(previousOrderIds: Set<string>): void {
    let newOrderCount = 0;
    
    this.orders.forEach(order => {
      const orderId = this.getOrderId(order);
      
      // Yeni sipari≈ü mi ve daha √∂nce yoktu mu?
      if (this.isNewOrder(order) && !previousOrderIds.has(orderId)) {
        newOrderCount++;
        this.newOrders.add(orderId);
        
        console.log(`üÜï Yeni sipari≈ü tespit edildi: ${orderId} (${order.type})`);
        
        // Ses √ßal
        if (this.isSoundEnabled) {
          this.playSound('newOrder');
        }
        
        // Desktop notification
        this.showDesktopNotification(
          `Yeni ${order.type} Sipari≈üi!`,
          `Sipari≈ü No: ${orderId}\nTutar: ${this.getOrderAmount(order)} ‚Ç∫`
        );
      }
    });
    
    if (newOrderCount > 0) {
      console.log(`üîî ${newOrderCount} yeni sipari≈ü bildirim sistemi tetiklendi`);
    }
  }

  private showDesktopNotification(title: string, message: string): void {
    if (!("Notification" in window)) return;

    if (Notification.permission === "granted") {
      const notification = new Notification(title, {
        body: message,
        icon: '/assets/images/logo.svg',
        tag: Date.now().toString(),
        requireInteraction: true,
        silent: false
      });

      notification.onclick = () => {
        window.focus();
        notification.close();
      };

      setTimeout(() => {
        notification.close();
      }, 10000);
    } else if (Notification.permission !== "denied") {
      Notification.requestPermission().then(permission => {
        if (permission === "granted") {
          this.showDesktopNotification(title, message);
        }
      });
    }
  }

  logout(): void {
    this.authService.logout();
    this.router.navigate(['/login']);
  }

  getKullaniciAdi(): string {
    return localStorage.getItem('kullaniciAdi') || 'Kullanƒ±cƒ±';
  }

  getSelectedStoreName(): string {
    if (!this.selectedStore || !this.stores.length) return 'Maƒüaza';
    const store = this.stores.find(s => s._id === this.selectedStore);
    return store?.magazaAdi || 'Maƒüaza';
  }

  getOrderId(order: Order): string {
    if (!order?.rawData) {
      console.warn('‚ö†Ô∏è getOrderId: rawData eksik');
      return '';
    }

    let orderId = '';

    switch (order.type) {
      case 'YEMEKSEPETI':
        const shortCode = order.rawData.shortCode || '';
        const code = order.rawData.code || '';
        orderId = shortCode ? `${shortCode} (${code})` : code;
        break;
        
      case 'GETIR':
        orderId = order.rawData.confirmationId || order.rawData.id || '';
        break;
        
      case 'TRENDYOL':
        const orderNumber = order.rawData.orderNumber || '';
        const orderCode = order.rawData.orderCode || '';
        orderId = orderCode ? `${orderNumber} (${orderCode})` : orderNumber;
        break;
        
      case 'MIGROS':
        const migrosOrderId = order.rawData.orderId || '';
        const confirmationId = order.rawData.platformConfirmationId || '';
        orderId = confirmationId ? `${migrosOrderId} (${confirmationId})` : migrosOrderId.toString();
        break;
        
      default:
        console.warn(`‚ö†Ô∏è Bilinmeyen platform i√ßin order ID: ${order.type}`);
        orderId = order.rawData.id || order.rawData.orderNumber || order.rawData.orderId || '';
    }

    if (!orderId) {
      console.error(`‚ùå Order ID bulunamadƒ±:`, order);
    }

    return orderId;
  }

  getCustomerName(order: Order): string {
    if (!order?.rawData) return 'M√º≈üteri Bilgisi Yok';

    let customerName = '';

    try {
      switch (order.type) {
        case 'YEMEKSEPETI':
          const ysCustomer = order.rawData.customer;
          customerName = `${ysCustomer?.firstName || ''} ${ysCustomer?.lastName || ''}`.trim();
          break;
          
        case 'GETIR':
          customerName = order.rawData.client?.name || '';
          break;
          
        case 'TRENDYOL':
          const tyCustomer = order.rawData.customer;
          customerName = `${tyCustomer?.firstName || ''} ${tyCustomer?.lastName || ''}`.trim();
          break;
          
        case 'MIGROS':
          if (order.rawData.customerInfo?.name) {
            customerName = order.rawData.customerInfo.name;
          } else if (order.rawData.customer) {
            const customer: any = order.rawData.customer;
            customerName = customer.fullName || `${customer.firstName || ''} ${customer.lastName || ''}`.trim();
          }
          break;
          
        default:
          console.warn(`‚ö†Ô∏è Bilinmeyen platform i√ßin m√º≈üteri adƒ±: ${order.type}`);
      }

      if (!customerName) {
        console.warn(`‚ö†Ô∏è M√º≈üteri adƒ± bulunamadƒ± (${order.type}):`, this.getOrderId(order));
        customerName = 'M√º≈üteri Bilgisi Yok';
      }

    } catch (error) {
      console.error(`‚ùå M√º≈üteri adƒ± alma hatasƒ± (${order.type}):`, error, order);
      customerName = 'Hata: M√º≈üteri Bilgisi';
    }

    return customerName;
  }

  getCustomerPhone(order: Order): string {
    if (!order?.rawData) return '';
    if (order.type === 'YEMEKSEPETI') return order.rawData.customer?.mobilePhone || '';
    if (order.type === 'GETIR') return order.rawData.client?.contactPhoneNumber || '';
    if (order.type === 'TRENDYOL') return order.rawData.callCenterPhone || '';
    if (order.type === 'MIGROS') return order.rawData.customerInfo?.phone || '';
    return '';
  }

  getOrderAmount(order: Order): number {
    if (!order?.rawData) return 0;
    
    let amount = 0;
    if (order.type === 'YEMEKSEPETI') amount = order.rawData.price?.grandTotal || 0;
    else if (order.type === 'GETIR') amount = order.rawData.totalDiscountedPrice || order.rawData.totalPrice || 0;
    else if (order.type === 'TRENDYOL') amount = order.rawData.totalPrice || 0;
    else if (order.type === 'MIGROS') amount = order.rawData.totalAmount || 0;

    return amount;
  }

  formatDate(date: string): string {
    if (!date) return '';
    return new Date(date).toLocaleString('tr-TR');
  }

  trackByOrderId = (index: number, order: Order): string => {
    return this.getOrderId(order) || index.toString();
  }

  openOrderDetails(order: Order): void {
    this.selectedOrder = order;
  }

  closeOrderDetails(): void {
    this.selectedOrder = null;
  }

  copyOrderJson(order: Order): void {
    if (!order?.rawData) return;
    
    try {
      const jsonString = JSON.stringify(order.rawData, null, 2);
      navigator.clipboard.writeText(jsonString);
      console.log('JSON kopyalandƒ±');
    } catch (error) {
      console.error('JSON kopyalama hatasƒ±:', error);
    }
  }

  private startBackgroundSyncs(storeId: string): void {
    if (!storeId) return;
    
    console.log('üöÄ Background sync sistemleri ba≈ülatƒ±lƒ±yor...', storeId);
    
    // Trendyol Sync - Her 11 saniyede bir
    this.entegreSiparisService.startTrendyolSync(storeId);
    console.log('‚úÖ Trendyol Sync ba≈ülatƒ±ldƒ± (11 saniye interval)');
    
    // Trendyol Refund Sync - Her 1 saatte bir
    this.entegreSiparisService.startTrendyolRefundSync(storeId);
    console.log('‚úÖ Trendyol Refund Sync ba≈ülatƒ±ldƒ± (1 saat interval)');
    
    // YemekSepeti Refund Sync - Her 3 saatte bir
    this.entegreSiparisService.startYemeksepetiRefundSync(storeId);
    console.log('‚úÖ YemekSepeti Refund Sync ba≈ülatƒ±ldƒ± (3 saat interval)');
    
    console.log('üéØ T√ºm background sync sistemleri aktif!');
  }

  getSyncStatus(): any {
    return {
      trendyol: this.entegreSiparisService.getTrendyolSyncStatus(),
      trendyolRefund: this.entegreSiparisService.getTrendyolRefundSyncStatus(),
      yemeksepetiRefund: this.entegreSiparisService.getYemeksepetiRefundSyncStatus()
    };
  }

  // Ses sistemi metodlarƒ±
  private async initializeAudio(): Promise<void> {
    console.log('üîä Ses sistemi ba≈ülatƒ±lƒ±yor...');
    
    const audioFiles = {
      newOrder: '/assets/sounds/web.mp3',
      success: '/assets/sounds/success.mp3',
      error: '/assets/sounds/beep.wav',      // error.mp3 bozuk, beep.wav kullan
      warning: '/assets/sounds/info.mp3'     // warning.mp3 bozuk, info.mp3 kullan
    };

    const loadPromises = Object.entries(audioFiles).map(([key, src]) => {
      return new Promise<void>((resolve) => {
        try {
          const audio = new Audio(src);
          audio.preload = 'auto';
          audio.volume = 0.7;
          
          audio.addEventListener('canplaythrough', () => {
            console.log(`‚úÖ Ses dosyasƒ± y√ºklendi: ${key}`);
            this.audioInstances[key] = audio;
            resolve();
          }, { once: true });
          
        audio.addEventListener('error', (error) => {
          console.error(`‚ùå Ses dosyasƒ± y√ºkleme hatasƒ± (${key}):`, {
            src: src,
            error: error,
            readyState: audio.readyState,
            networkState: audio.networkState
          });
          
          // Fallback ses dosyasƒ± dene
          if (key === 'error' && src.includes('beep.wav')) {
            console.log(`üîÑ Fallback deneniyor: beep2.wav`);
            const fallbackAudio = new Audio('/assets/sounds/beep2.wav');
            fallbackAudio.volume = 0.7;
            fallbackAudio.preload = 'auto';
            this.audioInstances[key] = fallbackAudio;
          } else if (key === 'warning' && src.includes('info.mp3')) {
            console.log(`üîÑ Fallback deneniyor: new_message.mp3`);
            const fallbackAudio = new Audio('/assets/sounds/new_message.mp3');
            fallbackAudio.volume = 0.7;
            fallbackAudio.preload = 'auto';
            this.audioInstances[key] = fallbackAudio;
          }
          
          resolve(); // Hata olsa da devam et
        }, { once: true });
          
          audio.load();
          setTimeout(() => resolve(), 3000);
          
        } catch (error) {
          console.error(`‚ùå Audio instance olu≈üturma hatasƒ± (${key}):`, error);
          resolve();
        }
      });
    });

    await Promise.all(loadPromises);
    console.log(`‚úÖ Ses sistemi hazƒ±r: ${Object.keys(this.audioInstances).length} dosya y√ºklendi`);
  }

  private playSound(type: 'newOrder' | 'success' | 'error' | 'warning'): void {
    if (!this.isSoundEnabled) return;

    const audio = this.audioInstances[type];
    if (!audio) {
      console.warn(`‚ö†Ô∏è Ses dosyasƒ± bulunamadƒ±: ${type}`);
      return;
    }

    console.log(`üîä Ses √ßalƒ±nƒ±yor: ${type}`);
    
    audio.currentTime = 0;
    audio.play().then(() => {
      console.log(`‚úÖ Ses ba≈üarƒ±yla √ßalƒ±ndƒ±: ${type}`);
      
      if (type === 'newOrder') {
        this.handleNewOrderSound();
      }
    }).catch(error => {
      console.error(`‚ùå Ses √ßalma hatasƒ± (${type}):`, error);
    });
  }

  private handleNewOrderSound(): void {
    const hasUnconfirmedOrders = this.orders.some(order => this.isNewOrder(order));
    
    if (hasUnconfirmedOrders && !this.isAutoApproveEnabled) {
      this.startSoundLoop();
    }
  }

  private startSoundLoop(): void {
    if (this.soundInterval) return;

    console.log('üîÑ Ses loop ba≈ülatƒ±lƒ±yor...');
    
    this.soundInterval = setInterval(() => {
      if (this.isSoundEnabled && !this.isAutoApproveEnabled) {
        const hasUnconfirmedOrders = this.orders.some(order => this.isNewOrder(order));
        
        if (hasUnconfirmedOrders) {
          this.playSound('newOrder');
        } else {
          this.stopSoundLoop();
        }
      } else {
        this.stopSoundLoop();
      }
    }, 5000);
  }

  private stopSoundLoop(): void {
    if (this.soundInterval) {
      console.log('üîá Ses loop durduruluyor...');
      clearInterval(this.soundInterval);
      this.soundInterval = null;
    }
  }

  toggleSound(): void {
    this.isSoundEnabled = !this.isSoundEnabled;
    localStorage.setItem('soundEnabled', this.isSoundEnabled.toString());
    
    if (!this.isSoundEnabled) {
      this.stopSoundLoop();
    }
    
    console.log(`üîä Ses ${this.isSoundEnabled ? 'a√ßƒ±ldƒ±' : 'kapatƒ±ldƒ±'}`);
  }

  toggleAutoApprove(): void {
    this.isAutoApproveEnabled = !this.isAutoApproveEnabled;
    localStorage.setItem('autoApproveEnabled', this.isAutoApproveEnabled.toString());
    
    console.log(`ü§ñ Otomatik onay ${this.isAutoApproveEnabled ? 'a√ßƒ±ldƒ±' : 'kapatƒ±ldƒ±'}`);
  }

  // Yeni sipari≈ü kontrol√º
  isNewOrder(order: Order): boolean {
    if (!order?.status) return false;
    
    const status = order.status.toString().toLowerCase();
    
    switch (order.type) {
      case 'GETIR':
        if (order.rawData?.isScheduled) {
          return status === '325' || status === '1600';
        }
        return status === '400';
        
      case 'YEMEKSEPETI':
        return status === 'processed' || status === 'received';
        
      case 'TRENDYOL':
        return order.rawData?.packageStatus?.toLowerCase() === 'created';
        
      case 'MIGROS':
        return status === 'new_pending' || status.includes('new');
        
      default:
        return false;
    }
  }

  getProducts(order: Order): any[] {
    return this.entegreSiparisService.getProducts(order);
  }

  getProductName(product: any): string {
    return this.entegreSiparisService.getProductName(product);
  }

  getProductQuantity(product: any): number {
    return this.entegreSiparisService.getProductQuantity(product);
  }

  // Otomatik onay sistemi
  private checkAndApproveOrders(): void {
    if (!this.isAutoApproveEnabled || !this.orders.length) {
      this.isRefreshing = false;
      return;
    }

    console.log('ü§ñ Otomatik onaylama kontrolleri ba≈ülatƒ±lƒ±yor...');
    let pendingApprovals = 0;
    let completedApprovals = 0;
    let failedApprovals = 0;

    this.orders.forEach(order => {
      if (pendingApprovals >= 5) return; // Max 5 sipari≈ü aynƒ± anda

      const orderId = this.getOrderId(order);

      // Zaten onaylanmƒ±≈ü mƒ±?
      if (this.approvedOrders.has(orderId)) {
        return;
      }

      // Onaylama ko≈üullarƒ±nƒ± kontrol et
      if (this.canAutoApproveOrder(order)) {
        pendingApprovals++;
        console.log(`ü§ñ Sipari≈ü otomatik onaylanƒ±yor: ${orderId}`);

        this.approveOrder(order).then(() => {
          completedApprovals++;
          console.log(`‚úÖ Otomatik onay ba≈üarƒ±lƒ±: ${orderId}`);
          
          if (completedApprovals + failedApprovals === pendingApprovals) {
            this.isRefreshing = false;
            console.log(`üèÅ Otomatik onaylama tamamlandƒ±: ${completedApprovals} ba≈üarƒ±lƒ±, ${failedApprovals} ba≈üarƒ±sƒ±z`);
          }
        }).catch(error => {
          failedApprovals++;
          console.error(`‚ùå Otomatik onay hatasƒ±: ${orderId}`, error);
          
          if (completedApprovals + failedApprovals === pendingApprovals) {
            this.isRefreshing = false;
          }
        });
      }
    });

    if (pendingApprovals === 0) {
      console.log('‚ÑπÔ∏è Otomatik onaylanacak sipari≈ü bulunamadƒ±');
      this.isRefreshing = false;
    }
  }

  private canAutoApproveOrder(order: Order): boolean {
    if (!order) return false;

    // 1. E≈üle≈ütirme kontrol√º
    if (this.hasAnyMapping(order)) {
      return false;
    }

    // 2. √ñdeme e≈üle≈ütirmesi kontrol√º
    if (!this.hasPaymentMapping(order)) {
      return false;
    }

    // 3. Zaten onaylanmƒ±≈ü mƒ±?
    const status = order?.status?.toString().toLowerCase();
    if (['accepted', '200', 'approved', 'picking', 'preparing'].includes(status)) {
      return false;
    }

    // 4. Platform-specific kontroller
    return this.checkPlatformSpecificApproval(order);
  }

  private checkPlatformSpecificApproval(order: Order): boolean {
    const status = order?.status?.toString().toLowerCase();
    
    switch (order.type) {
      case 'YEMEKSEPETI':
        return status === 'processed' || status === 'received';

      case 'GETIR':
        if (order.rawData?.isScheduled) {
          return status === '325' || status === '1600';
        }
        return status === '400';

      case 'TRENDYOL':
        return order?.rawData?.packageStatus?.toLowerCase() === 'created';

      case 'MIGROS':
        return status === 'new_pending' || status.includes('new');

      default:
        return false;
    }
  }

  private hasAnyMapping(order: Order): boolean {
    const products = this.getProducts(order);
    
    for (const product of products) {
      // Ana √ºr√ºn e≈üle≈ütirmesi
      const hasMainMapping = order.type === 'TRENDYOL' ? 
        !!product.mapping?.eslestirilenUrun : 
        !!product.mapping?.localProduct;
      
      if (!hasMainMapping) {
        return true; // E≈üle≈ütirme eksik
      }
    }
    
    return false; // T√ºm e≈üle≈ütirmeler tamam
  }

  hasPaymentMapping(order: Order): boolean {
    return !!order.rawData?.payment?.mapping?.localPaymentType;
  }

  getPaymentMappingText(order: Order): string {
    const hasMapping = this.hasPaymentMapping(order);
    return hasMapping ? '‚úì E≈üle≈ümi≈ü' : '‚úó E≈üle≈ümemi≈ü';
  }

  getPaymentMappingClass(order: Order): string {
    return this.hasPaymentMapping(order) ? 'text-green-600' : 'text-red-500';
  }

  getModifierClass(modifier: any): string {
    const isUnwanted = modifier.name?.toLowerCase().includes('istemiyorum');
    return isUnwanted ? 'unwanted' : '';
  }

  getModifierSymbol(modifier: any): string {
    const isUnwanted = modifier.name?.toLowerCase().includes('istemiyorum');
    return isUnwanted ? '‚äñ' : '‚Ä¢';
  }

  // Maƒüaza dropdown metodlarƒ±
  toggleStoreDropdown(): void {
    this.showStoreDropdown = !this.showStoreDropdown;
    if (this.showStoreDropdown) {
      this.storeSearchTerm = '';
    }
  }

  selectStore(store: any): void {
    this.onStoreChange(store._id);
    this.showStoreDropdown = false;
    this.storeSearchTerm = '';
  }

  getFilteredStores(): any[] {
    if (!this.storeSearchTerm) {
      return this.stores;
    }
    
    const searchTerm = this.storeSearchTerm.toLowerCase();
    return this.stores.filter(store => 
      store.magazaAdi.toLowerCase().includes(searchTerm) ||
      (store.verilenmagazakodu && store.verilenmagazakodu.toLowerCase().includes(searchTerm))
    );
  }

  private approveOrder(order: Order): Promise<void> {
    return new Promise((resolve) => {
      const orderId = this.getOrderId(order);

      if (this.approvedOrders.has(orderId)) {
        resolve();
        return;
      }

      const approvalData = {
        platform: order.type.toLowerCase(),
        orderId,
        action: 'verify' as const
      };

      this.entegreSiparisService.approveOrder(approvalData).subscribe({
        next: (response: any) => {
          this.approvedOrders.add(orderId);
          console.log('‚úÖ Sipari≈ü onaylandƒ±:', orderId);

          // UI g√ºncelle
          this.updateOrderStatusInUI(order, orderId);
          
          // Bildirim g√∂ster
          this.notificationService.showNotification(
            `Sipari≈ü onaylandƒ±: ${orderId}`,
            'success',
            'top-end'
          );

          // Ses √ßal
          this.playSound('success');

          // Detay penceresini kapat
          if (this.selectedOrder && this.getOrderId(this.selectedOrder) === orderId) {
            this.closeOrderDetails();
          }

          resolve();
        },
        error: (error) => {
          console.error('‚ùå Sipari≈ü onaylama hatasƒ±:', error);
          this.notificationService.showNotification(
            `Sipari≈ü onaylama hatasƒ±: ${orderId}`,
            'error',
            'top-end'
          );
          resolve();
        }
      });
    });
  }

  private updateOrderStatusInUI(order: Order, orderId: string): void {
    const index = this.orders.findIndex(o => this.getOrderId(o) === orderId);
    
    if (index !== -1) {
      // Platform-specific status update
      switch (order.type) {
        case 'GETIR':
          this.orders[index].status = '200';
          break;
        case 'YEMEKSEPETI':
          this.orders[index].status = 'accepted';
          break;
        case 'TRENDYOL':
          this.orders[index].status = 'picking';
          break;
        case 'MIGROS':
          this.orders[index].status = 'approved';
          break;
      }

      // Yeni sipari≈üler listesinden kaldƒ±r
      this.newOrders.delete(orderId);

      // Ses kontrol√º
      this.checkSoundAndAnimations();
    }
  }

  private checkSoundAndAnimations(): void {
    if (this.destroyed) return;

    const hasNewOrders = this.newOrders.size > 0;
    const unconfirmedOrders = this.orders.filter(order => this.isNewOrder(order));
    
    if (hasNewOrders && unconfirmedOrders.length > 0) {
      console.log(`üîä‚ú® ${this.newOrders.size} yeni sipari≈ü i√ßin ses ve animasyon ba≈ülatƒ±lƒ±yor`);
      
      // Ses √ßal
      if (this.isSoundEnabled) {
        this.handleNewOrderSound();
        this.startSoundLoop();
      }
      
      // Animasyonlarƒ± tetikle
      this.triggerNewOrderAnimations();
      
      // Desktop notification
      this.showNewOrderNotification();
      
    } else {
      console.log('üîá Yeni sipari≈ü yok, ses ve animasyon durduruluyor');
      this.stopSoundLoop();
      this.newOrders.clear();
    }
  }

  // Yeni sipari≈ü animasyonlarƒ±nƒ± tetikle
  private triggerNewOrderAnimations(): void {
    console.log('‚ú® Yeni sipari≈ü animasyonlarƒ± tetikleniyor');
    
    // Sayfa title'ƒ±nƒ± yanƒ±p s√∂nd√ºr
    this.flashPageTitle();
    
    // Scroll to new orders
    setTimeout(() => {
      this.scrollToNewOrders();
    }, 500);
  }

  // Sayfa title yanƒ±p s√∂nme
  private flashPageTitle(): void {
    if (this.destroyed) return;
    
    const originalTitle = document.title;
    let flashCount = 0;
    const maxFlashes = 6;
    
    const flashInterval = setInterval(() => {
      if (this.destroyed) {
        clearInterval(flashInterval);
        return;
      }
      
      document.title = flashCount % 2 === 0 
        ? `üîî YENƒ∞ Sƒ∞PARƒ∞≈û! (${this.newOrders.size})` 
        : originalTitle;
      
      flashCount++;
      
      if (flashCount >= maxFlashes) {
        clearInterval(flashInterval);
        document.title = originalTitle;
      }
    }, 1000);
  }

  // Yeni sipari≈ülere scroll
  private scrollToNewOrders(): void {
    if (this.destroyed || this.newOrders.size === 0) return;
    
    const firstNewOrderElement = document.querySelector('.new-order-animation');
    if (firstNewOrderElement) {
      firstNewOrderElement.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
      });
      console.log('üìú Yeni sipari≈üe scroll yapƒ±ldƒ±');
    }
  }

  // Desktop notification (yeni sipari≈ü i√ßin √∂zel)
  private showNewOrderNotification(): void {
    if (!('Notification' in window) || this.destroyed) return;
    
    if (Notification.permission === 'granted') {
      const orderCount = this.newOrders.size;
      const notification = new Notification(`üîî ${orderCount} Yeni Sipari≈ü!`, {
        body: `${orderCount} yeni sipari≈ü geldi. Kontrol etmek i√ßin tƒ±klayƒ±n.`,
        icon: '/assets/icons/icon.png',
        badge: '/assets/icons/icon.png',
        tag: 'new-orders',
        requireInteraction: true
      });
      
      notification.onclick = () => {
        window.focus();
        this.scrollToNewOrders();
        notification.close();
      };
      
      // Auto close after 10 seconds
      setTimeout(() => {
        notification.close();
      }, 10000);
      
      console.log('üñ•Ô∏è Desktop notification g√∂sterildi');
      
    } else if (Notification.permission !== 'denied') {
      // Permission iste
      Notification.requestPermission().then(permission => {
        if (permission === 'granted') {
          this.showNewOrderNotification();
        }
      });
    }
  }

  // Termal yazdƒ±rma sistemi
  printToThermalPrinter(order: Order): void {
    if (!order) return;

    const orderId = this.getOrderId(order);
    console.log(`üñ®Ô∏è Termal yazdƒ±rma ba≈ülatƒ±lƒ±yor: ${orderId} (${order.type})`);

    try {
      // HTML i√ßeriƒüi olu≈ütur
      const htmlContent = this.generateThermalHTML(order);
      
      // HTML validation
      if (!htmlContent || htmlContent.length < 100) {
        throw new Error('HTML i√ßeriƒüi √ßok kƒ±sa veya bo≈ü');
      }

      // Printer API'sine g√∂nder
      this.sendToPrinter(htmlContent, orderId);

    } catch (error) {
      console.error(`‚ùå Termal yazdƒ±rma hazƒ±rlƒ±k hatasƒ±: ${orderId}`, error);
      this.notificationService.showNotification(
        `Termal yazdƒ±rma hatasƒ±: ${error}`,
        'error',
        'top-end'
      );
    }
  }

  private generateThermalHTML(order: Order): string {
    const orderInfo = {
      orderId: this.getOrderId(order),
      platform: order.type,
      platformName: this.getSourceText(order.type),
      status: this.getStatusText(order.status),
      orderType: this.getOrderType(order),
      createdAt: this.formatDate(order.createdAt),
      isNew: this.isNewOrder(order),
      isScheduled: order.type === 'GETIR' && order.rawData?.isScheduled,
      scheduledDate: order.rawData?.scheduledDate ? this.formatDate(order.rawData.scheduledDate) : null
    };

    const customerInfo = {
      name: this.getCustomerName(order),
      phone: this.getCustomerPhone(order),
      address: this.getDeliveryAddress(order)
    };

    const productsHTML = this.generateProductsHTML(order);
    const amount = this.getOrderAmount(order);
    const paymentType = this.getPaymentType(order);

    return `<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Sipari≈ü #${orderInfo.orderId}</title>
<style>
body{font-family:'Courier New',monospace;font-size:18px;max-width:72mm;margin:0 auto;padding:0;line-height:1.2;color:#000;background:#fff}
table{width:100%;border-collapse:collapse;margin-bottom:8px}
th,td{text-align:left;padding:2px 4px;font-size:16px;vertical-align:top}
.header{text-align:center;margin-bottom:12px;padding-bottom:8px;border-bottom:2px solid #000}
.order-id{font-size:22px;font-weight:bold;margin-bottom:4px}
.order-source{font-size:18px;font-weight:bold;margin:4px 0}
.section-title{font-size:18px;font-weight:bold;border-bottom:1px solid #000;margin:12px 0 6px;padding-bottom:2px}
.product-name{font-size:16px;font-weight:bold}
.quantity{text-align:center;font-weight:bold;font-size:16px}
.price{text-align:right;font-weight:bold;font-size:16px}
.total-row{font-weight:bold;font-size:18px;padding:4px 0}
.new-order{color:#000;font-weight:bold;background-color:#f0f0f0;padding:2px 4px;border:2px solid #000}
.footer{text-align:center;font-size:12px;margin-top:12px;padding-top:8px;border-top:1px solid #000}
</style>
</head>
<body>
<div class="header">
  <div class="order-id ${orderInfo.isNew ? 'new-order' : ''}">
    ${orderInfo.isNew ? 'üÜï ' : ''}Sipari≈ü #${orderInfo.orderId}
  </div>
  <div class="order-source">${orderInfo.platformName}</div>
  <div class="order-type">${orderInfo.orderType}</div>
  <div style="font-size:14px; margin-top:4px;">${orderInfo.createdAt}</div>
  <div style="font-size:14px;">${orderInfo.status}</div>
  ${orderInfo.isScheduled ? `<div style="background:#ffffcc;padding:4px;border:1px solid #ffcc00;margin:4px 0;">‚è∞ ƒ∞leri Tarihli: ${orderInfo.scheduledDate}</div>` : ''}
</div>

<div class="section-title">M√ú≈ûTERƒ∞ Bƒ∞LGƒ∞LERƒ∞</div>
<table>
${customerInfo.name ? `<tr><td style="width:30%"><strong>Ad Soyad:</strong></td><td>${customerInfo.name}</td></tr>` : ''}
${customerInfo.phone ? `<tr><td><strong>Telefon:</strong></td><td>${customerInfo.phone}</td></tr>` : ''}
${customerInfo.address.address ? `<tr><td><strong>Adres:</strong></td><td style="word-wrap:break-word;">${customerInfo.address.address}</td></tr>` : ''}
${customerInfo.address.doorNo ? `<tr><td><strong>Kapƒ± No:</strong></td><td>${customerInfo.address.doorNo}</td></tr>` : ''}
${customerInfo.address.floor ? `<tr><td><strong>Kat:</strong></td><td>${customerInfo.address.floor}</td></tr>` : ''}
${customerInfo.address.description ? `<tr><td><strong>Not:</strong></td><td style="word-wrap:break-word;">${customerInfo.address.description}</td></tr>` : ''}
</table>

<div class="section-title">√úR√úNLER</div>
<table>
<tr>
  <th style="width:50%; font-size:16px; border-bottom:1px solid #000;">√úr√ºn</th>
  <th style="width:20%; font-size:16px; text-align:center; border-bottom:1px solid #000;">Adet</th>
  <th style="width:30%; font-size:16px; text-align:right; border-bottom:1px solid #000;">Fiyat</th>
</tr>
${productsHTML}
</table>

<table style="margin-top:12px; border-top:2px solid #000;">
<tr><td class="total-row">√ñdeme Tipi: ${paymentType}</td></tr>
<tr><td class="total-row" style="font-size:20px; padding:8px 0; border-top:1px solid #000;">
  <strong>TOPLAM: ${amount} ‚Ç∫</strong>
</td></tr>
</table>

<div class="footer">
  <div>Bu fi≈ü ${new Date().toLocaleString('tr-TR')} tarihinde olu≈üturulmu≈ütur.</div>
  <div style="margin-top: 4px;">EasyRest Desktop v1.0.0</div>
  <div style="margin-top: 2px; font-size: 10px;">Termal Yazdƒ±rma Sistemi</div>
</div>
</body>
</html>`;
  }

  private generateProductsHTML(order: Order): string {
    const products = this.getProducts(order);
    
    if (products.length === 0) {
      return `<tr><td colspan="3" style="text-align: center; padding: 10px; color: red;">‚ö†Ô∏è √úr√ºn bilgisi bulunamadƒ±!</td></tr>`;
    }

    let html = '';
    products.forEach((product, index) => {
      try {
        const productName = this.getProductName(product);
        const quantity = this.getProductQuantity(product);
        const price = (product.price || 0).toFixed(2);

        html += `
        <tr>
          <td class="product-name">${productName}</td>
          <td class="quantity">${quantity}</td>
          <td class="price">${price} ‚Ç∫</td>
        </tr>`;

        // Platform-specific sub-items
        if (order.type === 'YEMEKSEPETI' && product.selectedToppings) {
          html += this.generateYemekSepetiToppingsHTML(product.selectedToppings);
        } else if (order.type === 'TRENDYOL' && product.modifierProducts) {
          html += this.generateTrendyolModifiersHTML(product.modifierProducts);
        } else if (order.type === 'GETIR' && product.options) {
          html += this.generateGetirOptionsHTML(product.options);
        } else if (order.type === 'MIGROS' && product.options) {
          html += this.generateMigrosOptionsHTML(product.options);
        }

      } catch (error) {
        console.error(`‚ùå √úr√ºn HTML hatasƒ± (${index}):`, error, product);
        html += `<tr><td colspan="3" style="color: red;">√úr√ºn ${index + 1}: HTML olu≈üturma hatasƒ±</td></tr>`;
      }
    });

    return html;
  }

  private generateYemekSepetiToppingsHTML(toppings: any[]): string {
    if (!toppings || !Array.isArray(toppings)) return '';
    
    let html = '<tr><td colspan="3" style="padding-left: 12px;">';
    
    toppings.forEach((topping: any) => {
      if (topping && topping.name) {
        const toppingPrice = topping.price && topping.price > 0 ? ` (+${topping.price.toFixed(2)} ‚Ç∫)` : '';
        html += `<div style="font-size: 14px; padding-left: 8px; color: #333;">‚Ä¢ ${topping.name}${toppingPrice}</div>`;
      }
    });
    
    html += '</td></tr>';
    return html;
  }

  private generateTrendyolModifiersHTML(modifiers: any[]): string {
    if (!modifiers || !Array.isArray(modifiers)) return '';
    
    let html = '<tr><td colspan="3" style="padding-left: 12px;">';
    
    modifiers.forEach((modifier: any) => {
      const modifierName = modifier.name || '';
      const modifierPrice = modifier.price && modifier.price > 0 ? ` (+${modifier.price.toFixed(2)} ‚Ç∫)` : '';
      const isUnwanted = modifierName.toLowerCase().includes('istemiyorum');

      if (isUnwanted) {
        html += `<div style="font-size: 14px; padding-left: 8px; color: #666; text-decoration: line-through;">‚äñ ${modifierName}</div>`;
      } else {
        html += `<div style="font-size: 14px; padding-left: 8px; color: #333;">‚Ä¢ ${modifierName}${modifierPrice}</div>`;
      }
    });
    
    html += '</td></tr>';
    return html;
  }

  private generateGetirOptionsHTML(options: any[]): string {
    if (!options || !Array.isArray(options)) return '';
    
    let html = '<tr><td colspan="3" style="padding-left: 12px;">';
    
    options.forEach((category: any) => {
      const categoryName = category.name?.tr || category.name?.en || '';
      if (categoryName && category.options) {
        html += `<div style="font-weight: bold; margin-top: 6px;">${categoryName}:</div>`;
        
        category.options.forEach((option: any) => {
          const optionName = option.name?.tr || option.name?.en || '';
          const optionPrice = option.price && option.price > 0 ? ` (+${option.price.toFixed(2)} ‚Ç∫)` : '';
          html += `<div style="font-size: 14px; padding-left: 8px; color: #333;">‚Ä¢ ${optionName}${optionPrice}</div>`;
        });
      }
    });
    
    html += '</td></tr>';
    return html;
  }

  private generateMigrosOptionsHTML(options: any[]): string {
    if (!options || !Array.isArray(options)) return '';
    
    let html = '<tr><td colspan="3" style="padding-left: 12px;">';
    
    options.forEach((option: any) => {
      html += `<div style="font-weight: bold; margin-top: 4px;">${option.headerName}:</div>`;
      html += `<div style="font-size: 14px; padding-left: 8px; color: #333;">‚Ä¢ ${option.itemNames}</div>`;
    });
    
    html += '</td></tr>';
    return html;
  }

  private sendToPrinter(htmlContent: string, orderId: string): void {
    const printerUrl = 'http://localhost:41411/api/receipt/print';
    
    console.log(`üñ®Ô∏è Printer API'sine g√∂nderiliyor: ${orderId}`);

    this.http.post(printerUrl, htmlContent, {
      headers: new HttpHeaders({
        'Content-Type': 'text/html;charset=UTF-8'
      }),
      responseType: 'text'
    }).subscribe({
      next: (response) => {
        console.log(`‚úÖ Termal yazdƒ±rma ba≈üarƒ±lƒ±: ${orderId}`, response);
        
        this.notificationService.showNotification(
          `Termal yazdƒ±rma ba≈üarƒ±lƒ±: ${orderId}`,
          'success',
          'top-end'
        );

        this.playSound('success');
      },
      error: (error) => {
        console.error(`‚ùå Termal yazdƒ±rma hatasƒ±: ${orderId}`, error);
        
        let errorMessage = 'Termal yazdƒ±rma hatasƒ±';
        
        if (error.status === 0) {
          errorMessage = 'Termal yazƒ±cƒ± servisi √ßalƒ±≈ümƒ±yor (Port 41411)';
        } else if (error.status === 404) {
          errorMessage = 'Termal yazƒ±cƒ± API endpoint\'i bulunamadƒ±';
        }

        this.notificationService.showNotification(
          `${errorMessage}: ${orderId}`,
          'error',
          'top-end'
        );

        this.playSound('error');
      }
    });
  }

  // Platform helper metodlarƒ±
  getSourceText(type: string): string {
    if (!type) return 'Bilinmeyen';
    
    const sourceMap: { [key: string]: string } = {
      'YEMEKSEPETI': 'YemekSepeti',
      'TRENDYOL': 'Trendyol',
      'MIGROS': 'Migros',
      'GETIR': 'Getir'
    };

    return sourceMap[type.toUpperCase()] || type;
  }

  getOrderType(order: Order): string {
    switch (order.type) {
      case 'YEMEKSEPETI':
        const expeditionType = order.rawData?.expeditionType?.toLowerCase();
        switch (expeditionType) {
          case 'delivery': return 'Paket Sipari≈ü';
          case 'pickup': return 'Gel Al';
          case 'vendor': return 'Vale Sipari≈üi';
          default: return 'Paket Sipari≈ü';
        }
        
      case 'GETIR':
        const deliveryType = order.rawData?.deliveryType;
        switch (deliveryType) {
          case 1: return 'Getir Getirsin';
          case 2: return 'Restoran Getirsin';
          default: return 'Paket Sipari≈ü';
        }
        
      case 'TRENDYOL':
        const trendyolDeliveryType = order.rawData?.deliveryType?.toLowerCase();
        switch (trendyolDeliveryType) {
          case 'go': return 'Paket Sipari≈ü';
          case 'store_pickup': return 'Gel Al';
          default: return 'Paket Sipari≈ü';
        }
        
      case 'MIGROS':
        const deliveryProvider = order.rawData?.deliveryProvider?.toLowerCase();
        switch (deliveryProvider) {
          case 'restaurant': return 'Restoran Teslimat';
          case 'migros': return 'Migros Teslimat';
          case 'pickup': return 'Gel Al';
          default: return 'Paket Sipari≈ü';
        }
        
      default:
        return 'Paket Sipari≈ü';
    }
  }

  getPaymentType(order: Order): string {
    if (!order?.rawData) return '';

    // √ñnce mapping'den al
    const mapping = order.rawData.payment?.mapping?.localPaymentType;
    if (mapping?.odemeAdi) {
      return mapping.odemeAdi;
    }

    // Platform-specific payment handling
    switch (order.type) {
      case 'GETIR':
        return order.rawData.paymentMethodText?.tr || 
               order.rawData.payment?.text?.tr || 
               'Kredi Kartƒ±';
        
      case 'YEMEKSEPETI':
        return order.rawData.payment?.text?.tr || 'Kredi Kartƒ±';
        
      case 'TRENDYOL':
        if (order.rawData.payment?.type === 'PAY_WITH_MEAL_CARD' && 
            order.rawData.payment?.mealCardType) {
          return `Yemek Kartƒ± (${order.rawData.payment.mealCardType})`;
        }
        return order.rawData.payment?.text?.tr || 'Kredi Kartƒ±';
        
      case 'MIGROS':
        return 'Kredi Kartƒ±';
        
      default:
        return 'Bilinmeyen √ñdeme Tipi';
    }
  }

  getDeliveryAddress(order: Order): any {
    if (!order?.rawData) return {};

    try {
      switch (order.type) {
        case 'GETIR':
          const getirAddress = order.rawData.client?.deliveryAddress;
          if (getirAddress) {
            const fullAddress = [
              getirAddress.address,
              getirAddress.district,
              getirAddress.city
            ].filter(Boolean).join(', ');

            return {
              address: fullAddress,
              doorNo: getirAddress.doorNo || '',
              floor: getirAddress.floor || '',
              description: getirAddress.description || ''
            };
          }
          break;
          
        case 'YEMEKSEPETI':
          const ysAddress = order.rawData.delivery?.address;
          if (ysAddress) {
            const addressLine = [
              ysAddress.street,
              ysAddress.number ? `No:${ysAddress.number}` : null,
              ysAddress.building,
              ysAddress.city
            ].filter(Boolean).join(', ');

            return {
              address: addressLine.trim(),
              doorNo: ysAddress.flatNumber || '',
              floor: ysAddress.floor || '',
              description: ysAddress.deliveryInstructions || order.rawData.comments?.customerComment || ''
            };
          }
          break;
          
        case 'TRENDYOL':
          const tyAddress = order.rawData.address;
          if (tyAddress) {
            const addressComponents = [
              tyAddress.address1,
              tyAddress.address2,
              tyAddress.neighborhood,
              tyAddress.district,
              tyAddress.city
            ].filter(Boolean);
            
            return {
              address: addressComponents.join(', '),
              doorNo: tyAddress.doorNumber || tyAddress.apartmentNumber || '',
              floor: tyAddress.floor || '',
              description: tyAddress.addressDescription || order.rawData.customerNote || ''
            };
          }
          break;
          
        case 'MIGROS':
          // CustomerInfo'dan adres
          if (order.rawData.customerInfo?.address) {
            const address = order.rawData.customerInfo.address;
            const addressLine = [
              address.street,
              address.number ? `No:${address.number}` : null,
              address.detail
            ].filter(Boolean).join(', ');

            return {
              address: addressLine,
              doorNo: address.door || '',
              floor: address.floor || '',
              description: address.direction || ''
            };
          }
          break;
      }
    } catch (error) {
      console.error(`‚ùå Adres i≈üleme hatasƒ± (${order.type}):`, error);
    }

    return {};
  }

  getStatusText(status: string | number): string {
    if (!status) return 'Durum Belirsiz';

    const statusStr = status.toString().toLowerCase();
    
    // Platform-agnostic status'lar
    const commonStatuses: { [key: string]: string } = {
      'new': 'Yeni Sipari≈ü',
      'received': 'Yeni Sipari≈ü',
      'accepted': 'Onaylandƒ±',
      'rejected': 'Reddedildi',
      'cancelled': 'ƒ∞ptal Edildi',
      'completed': 'Tamamlandƒ±',
      'delivered': 'Teslim Edildi'
    };

    if (commonStatuses[statusStr]) {
      return commonStatuses[statusStr];
    }

    // Platform-specific status'lar
    if (['400', '325', '1600'].includes(statusStr)) {
      if (statusStr === '400') return 'Yeni Sipari≈ü';
      if (statusStr === '325') return 'ƒ∞leri Tarihli Sipari≈ü';
      if (statusStr === '1600') return 'ƒ∞leri Tarihli Hatƒ±rlatma';
    }
    
    if (statusStr === '200') return 'Onaylandƒ±';
    if (['700', '800'].includes(statusStr)) return 'Tamamlandƒ±';
    if (statusStr === 'processed') return 'Yeni Sipari≈ü';
    if (statusStr === 'created') return 'Yeni Sipari≈ü';
    if (['preparing', 'picking'].includes(statusStr)) return 'Hazƒ±rlanƒ±yor';
    if (statusStr === 'new_pending') return 'Yeni Sipari≈ü';

    return `Durum: ${status}`;
  }

  // Filtreleme sistemi
  filteredOrder(type: string): void {
    console.log(`üîç Sipari≈ü filtreleniyor: ${type}`);
    
    this.currentFilter = type;
    
    if (type === 'ALL') {
      this.filteredOrders = [...this.orders];
    } else {
      this.filteredOrders = this.orders.filter(order => order.type === type);
    }

    console.log(`üìä Filtreleme sonucu: ${this.filteredOrders.length}/${this.orders.length} sipari≈ü`);
  }

  private updateSummary(): void {
    this.summary = {
      total: this.orders.length,
      byType: {
        trendyol: this.orders.filter(o => o.type === 'TRENDYOL').length,
        yemeksepeti: this.orders.filter(o => o.type === 'YEMEKSEPETI').length,
        migros: this.orders.filter(o => o.type === 'MIGROS').length,
        getir: this.orders.filter(o => o.type === 'GETIR').length
      }
    };
  }

  // Manual refresh
  refreshOrders(): void {
    console.log('üîÑ Manual refresh ba≈ülatƒ±lƒ±yor...');
    this.loadOrders();
  }

  // Sipari≈ü onaylama (manuel)
  manualApproveOrder(order: Order): void {
    if (!order) return;

    const orderId = this.getOrderId(order);
    console.log(`üëÜ Manuel sipari≈ü onaylama: ${orderId}`);

    this.approveOrder(order).then(() => {
      console.log(`‚úÖ Manuel onay tamamlandƒ±: ${orderId}`);
    }).catch(error => {
      console.error(`‚ùå Manuel onay hatasƒ±: ${orderId}`, error);
    });
  }

  // Sipari≈ü detayƒ±nda kullanƒ±lacak helper metodlar
  canApproveOrder(order: Order): boolean {
    if (!order) return false;
    
    // Zaten onaylanmƒ±≈ü mƒ±?
    if (this.approvedOrders.has(this.getOrderId(order))) {
      return false;
    }
    
    // Yeni sipari≈ü mi?
    return this.isNewOrder(order);
  }

  getOrderSummaryText(order: Order): string {
    const products = this.getProducts(order);
    const productCount = products.length;
    const amount = this.getOrderAmount(order);
    const customerName = this.getCustomerName(order);
    
    return `${customerName} - ${productCount} √ºr√ºn - ${amount} ‚Ç∫`;
  }

  // Platform logo ve renk helper'larƒ±
  getSourceLogo(type: string): string {
    return this.entegreSiparisService.getPlatformLogo(type);
  }

  getSourceColor(type: string): string {
    return this.entegreSiparisService.getPlatformColor(type);
  }

  // Sipari≈ü durumu helper'larƒ±
  getStatusClass(status: string | number): string {
    if (!status) return 'bg-gray-100 text-gray-800';

    const statusStr = status.toString().toLowerCase();
    
    // Yeni sipari≈ü durumlarƒ± (kƒ±rmƒ±zƒ±)
    if (['received', 'new', '400', 'created', 'processed', 'new_pending'].includes(statusStr)) {
      return 'bg-red-100 text-red-800';
    }
    
    // Onaylanmƒ±≈ü durumlar (ye≈üil)
    if (['200', 'accepted', 'preparing', 'picking', 'approved'].includes(statusStr)) {
      return 'bg-green-100 text-green-800';
    }
    
    // ƒ∞ptal/Ret durumlarƒ± (gri)
    if (['rejected', 'cancelled', 'unsupplied'].includes(statusStr)) {
      return 'bg-gray-100 text-gray-800';
    }
    
    // Tamamlanmƒ±≈ü (mavi)
    if (['delivered', '700', '800', 'completed'].includes(statusStr)) {
      return 'bg-blue-100 text-blue-800';
    }

    return 'bg-gray-100 text-gray-800';
  }

  // Format helper'larƒ±
  formatPrice(price: number): string {
    return price.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
  }

  formatTime(date: string): string {
    return new Date(date).toLocaleTimeString('tr-TR', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  }

  private setupPageVisibilityListener(): void {
    document.addEventListener('visibilitychange', () => {
      this.isPageVisible = !document.hidden;
      console.log(`üëÅÔ∏è Page visibility deƒüi≈üti: ${this.isPageVisible ? 'g√∂r√ºn√ºr' : 'gizli'}`);
      
      if (this.isPageVisible && this.selectedStore) {
        // Sayfa tekrar g√∂r√ºn√ºr olduƒüunda refresh yap
        setTimeout(() => {
          if (!this.destroyed && !this.loading && !this.isRefreshing) {
            console.log('üëÅÔ∏è Sayfa aktif oldu, refresh yapƒ±lƒ±yor...');
            this.silentRefresh();
          }
        }, 1000);
      }
    });
  }

  // Performance monitoring
  private performMemoryCleanup(): void {
    const oneHourAgo = Date.now() - (60 * 60 * 1000);
    
    // Eski onaylanmƒ±≈ü sipari≈üleri temizle
    const oldApprovedOrders = Array.from(this.approvedOrders).filter(orderId => {
      const order = this.orders.find(o => this.getOrderId(o) === orderId);
      if (order) {
        const orderTime = new Date(order.createdAt).getTime();
        return orderTime < oneHourAgo;
      }
      return true;
    });

    oldApprovedOrders.forEach(orderId => {
      this.approvedOrders.delete(orderId);
    });

    if (oldApprovedOrders.length > 0) {
      console.log(`üßπ ${oldApprovedOrders.length} eski onaylanmƒ±≈ü sipari≈ü temizlendi`);
    }

    // Eski yeni sipari≈ü i≈üaretlerini temizle
    const oldNewOrders = Array.from(this.newOrders).filter(orderId => {
      const order = this.orders.find(o => this.getOrderId(o) === orderId);
      if (order) {
        const orderTime = new Date(order.createdAt).getTime();
        return orderTime < oneHourAgo;
      }
      return true;
    });

    oldNewOrders.forEach(orderId => {
      this.newOrders.delete(orderId);
    });

    if (oldNewOrders.length > 0) {
      console.log(`üßπ ${oldNewOrders.length} eski yeni sipari≈ü i≈üareti temizlendi`);
    }

    // Memory usage log
    const memoryUsage = {
      orders: this.orders.length,
      filteredOrders: this.filteredOrders.length,
      newOrders: this.newOrders.size,
      approvedOrders: this.approvedOrders.size,
      stores: this.stores.length
    };

    console.log('üìä Memory kullanƒ±mƒ±:', memoryUsage);
  }

  // Debug ve monitoring metodlarƒ±
  getSystemStatus(): any {
    return {
      component: {
        destroyed: this.destroyed,
        loading: this.loading,
        isRefreshing: this.isRefreshing,
        pageVisible: this.isPageVisible,
        consecutiveFailures: this.consecutiveFailures
      },
      orders: {
        total: this.orders.length,
        filtered: this.filteredOrders.length,
        newOrders: this.newOrders.size,
        approvedOrders: this.approvedOrders.size,
        currentFilter: this.currentFilter
      },
      settings: {
        soundEnabled: this.isSoundEnabled,
        autoApproveEnabled: this.isAutoApproveEnabled,
        selectedStore: this.selectedStore
      },
      sync: this.getSyncStatus(),
      memory: {
        lastRefreshTime: new Date(this.lastRefreshTime).toLocaleString('tr-TR'),
        minRefreshInterval: `${this.MIN_REFRESH_INTERVAL_MS}ms`,
        timeout: `${this.SILENT_REFRESH_TIMEOUT_MS}ms`
      }
    };
  }

  // Debug i√ßin console'a sistem durumunu yazdƒ±r
  logSystemStatus(): void {
    console.log('üîç Sistem Durumu:', this.getSystemStatus());
  }


  // Guide'dan: Sipari≈ü i≈üleme algoritmasƒ±
  private processOrders(orders: any[]): void {
    if (!Array.isArray(orders) || this.destroyed) {
      console.warn('‚ùå processOrders: Ge√ßersiz sipari≈ü verisi veya component destroyed');
      return;
    }

    console.log(`‚öôÔ∏è ${orders.length} sipari≈ü i≈üleniyor...`);
    const startTime = Date.now();

    // Performans metrikleri
    const metrics = {
      total: orders.length,
      processed: 0,
      newOrders: 0,
      errors: 0,
      platforms: {
        trendyol: 0,
        yemeksepeti: 0,
        migros: 0,
        getir: 0,
        unknown: 0
      }
    };

    // Mevcut sipari≈üleri temizle
    this.orders = [];
    this.newOrders.clear(); // √ñnceki yeni sipari≈ü i≈üaretlerini temizle

    // Her sipari≈üi i≈üle
    orders.forEach((order, orderIndex) => {
      if (this.destroyed) return;

      try {
        if (!order?.rawData) {
          console.warn(`‚ö†Ô∏è Sipari≈ü ${orderIndex} rawData eksik:`, order);
          metrics.errors++;
          return;
        }

        const updatedOrder = this.processOrderByPlatform(order);
        
        if (updatedOrder) {
          this.orders.push(updatedOrder);
          metrics.processed++;
          
          // Platform sayacƒ±nƒ± artƒ±r
          const platform = updatedOrder.type.toLowerCase();
          if (platform in metrics.platforms) {
            metrics.platforms[platform as keyof typeof metrics.platforms]++;
          } else {
            metrics.platforms.unknown++;
          }

          // Yeni sipari≈ü kontrol√º
          if (this.isNewOrder(updatedOrder)) {
            const orderId = this.getOrderId(updatedOrder);
            if (orderId) {
              this.newOrders.add(orderId);
              metrics.newOrders++;

              console.log(`üÜï Yeni sipari≈ü tespit edildi: ${orderId} (${updatedOrder.type})`);
            }
          }
        }
      } catch (error) {
        console.error(`‚ùå Sipari≈ü i≈üleme hatasƒ± (order ${orderIndex}):`, error, order);
        metrics.errors++;
      }
    });

    // Sipari≈üleri sƒ±rala
    this.sortOrders();

    // Summary g√ºncelle
    this.updateSummary();

    const endTime = Date.now();
    const processingTime = endTime - startTime;
    
    console.log('üìä Sipari≈ü i≈üleme tamamlandƒ±:', {
      ...metrics,
      processingTime: `${processingTime}ms`,
      avgTimePerOrder: `${(processingTime / metrics.total).toFixed(2)}ms`
    });

    // Performance warning
    if (processingTime > 5000) {
      console.warn(`‚ö†Ô∏è Yava≈ü i≈üleme tespit edildi: ${processingTime}ms (${metrics.total} sipari≈ü)`);
    }
  }

  private processOrderByPlatform(order: any): Order | null {
    const platform = order.platform?.toLowerCase() || order.type?.toLowerCase();
    
    try {
      // Platform normalization
      let normalizedOrder: Order;
      
      switch (platform) {
        case 'yemeksepeti':
          normalizedOrder = {
            ...order,
            type: 'YEMEKSEPETI',
            status: order.status || 'new',
            rawData: {
              ...order.rawData,
              shortCode: order.rawData.shortCode || '',
              code: order.rawData.code || '',
              expeditionType: order.rawData.expeditionType || 'delivery'
            }
          };
          break;
          
        case 'getir':
          normalizedOrder = {
            ...order,
            type: 'GETIR',
            status: order.status || 'new',
            rawData: {
              ...order.rawData,
              confirmationId: order.rawData.confirmationId || order.rawData.id || '',
              isScheduled: order.rawData.isScheduled || false,
              deliveryType: order.rawData.deliveryType || 2
            }
          };
          break;
          
        case 'trendyol':
          normalizedOrder = {
            ...order,
            type: 'TRENDYOL',
            status: order.status || 'new',
            rawData: {
              ...order.rawData,
              orderNumber: order.rawData.orderNumber || '',
              packageStatus: order.rawData.packageStatus || 'Created',
              totalPrice: order.rawData.totalPrice || 0
            }
          };
          break;
          
        case 'migros':
          normalizedOrder = {
            ...order,
            type: 'MIGROS',
            status: order.status || 'NEW_PENDING',
            rawData: {
              ...order.rawData,
              orderId: order.rawData.orderId || '',
              platformConfirmationId: order.rawData.platformConfirmationId || ''
            }
          };
          break;
          
        default:
          console.warn(`‚ö†Ô∏è Bilinmeyen platform: ${platform}`, order);
          // Fallback - platform'u type olarak kullan
          normalizedOrder = {
            ...order,
            type: order.type || order.platform || 'UNKNOWN',
            status: order.status || 'new'
          };
      }

      return normalizedOrder;
      
    } catch (error) {
      console.error(`‚ùå ${platform} sipari≈üi i≈ülenirken hata:`, error, order);
      return null;
    }
  }

  private sortOrders(): void {
    if (this.destroyed || !this.orders.length) return;

    console.log('üìä Sipari≈üler sƒ±ralanƒ±yor...');
    const startTime = Date.now();

    try {
      this.orders.sort((a, b) => {
        // 1. √ñncelik: Yeni sipari≈üler en √ºstte
        const isNewA = this.isNewOrder(a);
        const isNewB = this.isNewOrder(b);

        if (isNewA && !isNewB) return -1;
        if (!isNewA && isNewB) return 1;

        // 2. √ñncelik: ƒ∞leri tarihli sipari≈üler (Getir)
        const isScheduledA = a.type === 'GETIR' && a.rawData?.isScheduled;
        const isScheduledB = b.type === 'GETIR' && b.rawData?.isScheduled;

        if (isScheduledA && !isScheduledB) return -1;
        if (!isScheduledA && isScheduledB) return 1;

        // 3. √ñncelik: Platform sƒ±rasƒ± (Trendyol > YemekSepeti > Migros > Getir)
        const platformPriority = {
          'TRENDYOL': 4,
          'YEMEKSEPETI': 3,
          'MIGROS': 2,
          'GETIR': 1
        };
        
        const priorityA = platformPriority[a.type as keyof typeof platformPriority] || 0;
        const priorityB = platformPriority[b.type as keyof typeof platformPriority] || 0;
        
        if (priorityA !== priorityB) {
          return priorityB - priorityA;
        }

        // 4. Son √∂ncelik: Tarih (yeni olan √ºstte)
        const dateA = new Date(a.createdAt).getTime();
        const dateB = new Date(b.createdAt).getTime();

        return dateB - dateA;
      });

      const endTime = Date.now();
      console.log(`‚úÖ Sƒ±ralama tamamlandƒ±: ${endTime - startTime}ms`);
      
    } catch (error) {
      console.error('‚ùå Sipari≈ü sƒ±ralama hatasƒ±:', error);
    }
  }
}